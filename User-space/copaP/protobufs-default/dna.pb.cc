// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufs-default/dna.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobufs-default/dna.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RemyBuffers {

namespace {

const ::google::protobuf::Descriptor* WhiskerTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiskerTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Whisker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Whisker_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptimizationSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizationSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptimizationSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizationSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto() {
  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobufs-default/dna.proto");
  GOOGLE_CHECK(file != NULL);
  WhiskerTree_descriptor_ = file->message_type(0);
  static const int WhiskerTree_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, optimizer_),
  };
  WhiskerTree_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhiskerTree_descriptor_,
      WhiskerTree::default_instance_,
      WhiskerTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, _has_bits_[0]),
      -1,
      -1,
      sizeof(WhiskerTree),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, _internal_metadata_),
      -1);
  MemoryRange_descriptor_ = file->message_type(1);
  static const int MemoryRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, upper_),
  };
  MemoryRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryRange_descriptor_,
      MemoryRange::default_instance_,
      MemoryRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, _has_bits_[0]),
      -1,
      -1,
      sizeof(MemoryRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, _internal_metadata_),
      -1);
  Memory_descriptor_ = file->message_type(2);
  static const int Memory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rec_send_ewma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rec_rec_ewma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rtt_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, slow_rec_rec_ewma_),
  };
  Memory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Memory_descriptor_,
      Memory::default_instance_,
      Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _has_bits_[0]),
      -1,
      -1,
      sizeof(Memory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _internal_metadata_),
      -1);
  Whisker_descriptor_ = file->message_type(3);
  static const int Whisker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, window_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, window_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, intersend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, domain_),
  };
  Whisker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Whisker_descriptor_,
      Whisker::default_instance_,
      Whisker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, _has_bits_[0]),
      -1,
      -1,
      sizeof(Whisker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, _internal_metadata_),
      -1);
  OptimizationSetting_descriptor_ = file->message_type(4);
  static const int OptimizationSetting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, min_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, min_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, max_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, default_value_),
  };
  OptimizationSetting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptimizationSetting_descriptor_,
      OptimizationSetting::default_instance_,
      OptimizationSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, _has_bits_[0]),
      -1,
      -1,
      sizeof(OptimizationSetting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, _internal_metadata_),
      -1);
  OptimizationSettings_descriptor_ = file->message_type(5);
  static const int OptimizationSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, window_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, window_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, intersend_),
  };
  OptimizationSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptimizationSettings_descriptor_,
      OptimizationSettings::default_instance_,
      OptimizationSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(OptimizationSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, _internal_metadata_),
      -1);
  Range_descriptor_ = file->message_type(6);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, high_),
  };
  Range_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      -1,
      -1,
      sizeof(Range),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_),
      -1);
  ConfigRange_descriptor_ = file->message_type(7);
  static const int ConfigRange_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, link_packets_per_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, rtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, num_senders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, link_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, mean_off_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, mean_on_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, drop_rate_),
  };
  ConfigRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigRange_descriptor_,
      ConfigRange::default_instance_,
      ConfigRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfigRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, _internal_metadata_),
      -1);
  NetConfig_descriptor_ = file->message_type(8);
  static const int NetConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, mean_on_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, mean_off_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, num_senders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, link_ppt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, link_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, drop_rate_),
  };
  NetConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetConfig_descriptor_,
      NetConfig::default_instance_,
      NetConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhiskerTree_descriptor_, &WhiskerTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryRange_descriptor_, &MemoryRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Memory_descriptor_, &Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Whisker_descriptor_, &Whisker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptimizationSetting_descriptor_, &OptimizationSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptimizationSettings_descriptor_, &OptimizationSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigRange_descriptor_, &ConfigRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetConfig_descriptor_, &NetConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto() {
  delete WhiskerTree::default_instance_;
  delete WhiskerTree_reflection_;
  delete MemoryRange::default_instance_;
  delete MemoryRange_reflection_;
  delete Memory::default_instance_;
  delete Memory_reflection_;
  delete Whisker::default_instance_;
  delete Whisker_reflection_;
  delete OptimizationSetting::default_instance_;
  delete OptimizationSetting_reflection_;
  delete OptimizationSettings::default_instance_;
  delete OptimizationSettings_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete ConfigRange::default_instance_;
  delete ConfigRange_reflection_;
  delete NetConfig::default_instance_;
  delete NetConfig_reflection_;
}

void protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033protobufs-default/dna.proto\022\013RemyBuffe"
    "rs\"\347\001\n\013WhiskerTree\022(\n\006domain\030\001 \001(\0132\030.Rem"
    "yBuffers.MemoryRange\022*\n\010children\030\002 \003(\0132\030"
    ".RemyBuffers.WhiskerTree\022\"\n\004leaf\030\003 \001(\0132\024"
    ".RemyBuffers.Whisker\022(\n\006config\030\004 \001(\0132\030.R"
    "emyBuffers.ConfigRange\0224\n\toptimizer\030\005 \001("
    "\0132!.RemyBuffers.OptimizationSettings\"U\n\013"
    "MemoryRange\022\"\n\005lower\030\013 \001(\0132\023.RemyBuffers"
    ".Memory\022\"\n\005upper\030\014 \001(\0132\023.RemyBuffers.Mem"
    "ory\"c\n\006Memory\022\025\n\rrec_send_ewma\030\025 \001(\001\022\024\n\014"
    "rec_rec_ewma\030\026 \001(\001\022\021\n\trtt_ratio\030\027 \001(\001\022\031\n"
    "\021slow_rec_rec_ewma\030\030 \001(\001\"y\n\007Whisker\022\030\n\020w"
    "indow_increment\030\037 \001(\021\022\027\n\017window_multiple"
    "\030  \001(\001\022\021\n\tintersend\030! \001(\001\022(\n\006domain\030\" \001("
    "\0132\030.RemyBuffers.MemoryRange\"\216\001\n\023Optimiza"
    "tionSetting\022\021\n\tmin_value\030) \001(\001\022\021\n\tmax_va"
    "lue\030* \001(\001\022\022\n\nmin_change\030+ \001(\001\022\022\n\nmax_cha"
    "nge\030, \001(\001\022\022\n\nmultiplier\030- \001(\001\022\025\n\rdefault"
    "_value\030. \001(\001\"\302\001\n\024OptimizationSettings\022:\n"
    "\020window_increment\0303 \001(\0132 .RemyBuffers.Op"
    "timizationSetting\0229\n\017window_multiple\0304 \001"
    "(\0132 .RemyBuffers.OptimizationSetting\0223\n\t"
    "intersend\0305 \001(\0132 .RemyBuffers.Optimizati"
    "onSetting\"\"\n\005Range\022\013\n\003low\030= \001(\001\022\014\n\004high\030"
    "> \001(\001\"\214\002\n\013ConfigRange\022/\n\023link_packets_pe"
    "r_ms\030G \001(\0132\022.RemyBuffers.Range\022\037\n\003rtt\030H "
    "\001(\0132\022.RemyBuffers.Range\022\'\n\013num_senders\030I"
    " \001(\0132\022.RemyBuffers.Range\022&\n\nlink_limit\030J"
    " \001(\0132\022.RemyBuffers.Range\022\031\n\021mean_off_dur"
    "ation\030Q \001(\001\022\030\n\020mean_on_duration\030R \001(\001\022%\n"
    "\tdrop_rate\030S \001(\0132\022.RemyBuffers.Range\"\235\001\n"
    "\tNetConfig\022\030\n\020mean_on_duration\030\001 \001(\001\022\031\n\021"
    "mean_off_duration\030\002 \001(\001\022\023\n\013num_senders\030\003"
    " \001(\r\022\020\n\010link_ppt\030\004 \001(\001\022\r\n\005delay\030\005 \001(\001\022\022\n"
    "\nlink_limit\030\006 \001(\r\022\021\n\tdrop_rate\030\007 \001(\001", 1396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobufs-default/dna.proto", &protobuf_RegisterTypes);
  WhiskerTree::default_instance_ = new WhiskerTree();
  MemoryRange::default_instance_ = new MemoryRange();
  Memory::default_instance_ = new Memory();
  Whisker::default_instance_ = new Whisker();
  OptimizationSetting::default_instance_ = new OptimizationSetting();
  OptimizationSettings::default_instance_ = new OptimizationSettings();
  Range::default_instance_ = new Range();
  ConfigRange::default_instance_ = new ConfigRange();
  NetConfig::default_instance_ = new NetConfig();
  WhiskerTree::default_instance_->InitAsDefaultInstance();
  MemoryRange::default_instance_->InitAsDefaultInstance();
  Memory::default_instance_->InitAsDefaultInstance();
  Whisker::default_instance_->InitAsDefaultInstance();
  OptimizationSetting::default_instance_->InitAsDefaultInstance();
  OptimizationSettings::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  ConfigRange::default_instance_->InitAsDefaultInstance();
  NetConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobufs_2ddefault_2fdna_2eproto {
  StaticDescriptorInitializer_protobufs_2ddefault_2fdna_2eproto() {
    protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  }
} static_descriptor_initializer_protobufs_2ddefault_2fdna_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhiskerTree::kDomainFieldNumber;
const int WhiskerTree::kChildrenFieldNumber;
const int WhiskerTree::kLeafFieldNumber;
const int WhiskerTree::kConfigFieldNumber;
const int WhiskerTree::kOptimizerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhiskerTree::WhiskerTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.WhiskerTree)
}

void WhiskerTree::InitAsDefaultInstance() {
  domain_ = const_cast< ::RemyBuffers::MemoryRange*>(&::RemyBuffers::MemoryRange::default_instance());
  leaf_ = const_cast< ::RemyBuffers::Whisker*>(&::RemyBuffers::Whisker::default_instance());
  config_ = const_cast< ::RemyBuffers::ConfigRange*>(&::RemyBuffers::ConfigRange::default_instance());
  optimizer_ = const_cast< ::RemyBuffers::OptimizationSettings*>(&::RemyBuffers::OptimizationSettings::default_instance());
}

WhiskerTree::WhiskerTree(const WhiskerTree& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.WhiskerTree)
}

void WhiskerTree::SharedCtor() {
  _cached_size_ = 0;
  domain_ = NULL;
  leaf_ = NULL;
  config_ = NULL;
  optimizer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiskerTree::~WhiskerTree() {
  // @@protoc_insertion_point(destructor:RemyBuffers.WhiskerTree)
  SharedDtor();
}

void WhiskerTree::SharedDtor() {
  if (this != default_instance_) {
    delete domain_;
    delete leaf_;
    delete config_;
    delete optimizer_;
  }
}

void WhiskerTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiskerTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiskerTree_descriptor_;
}

const WhiskerTree& WhiskerTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

WhiskerTree* WhiskerTree::default_instance_ = NULL;

WhiskerTree* WhiskerTree::New(::google::protobuf::Arena* arena) const {
  WhiskerTree* n = new WhiskerTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhiskerTree::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.WhiskerTree)
  if (_has_bits_[0 / 32] & 29u) {
    if (has_domain()) {
      if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
    }
    if (has_leaf()) {
      if (leaf_ != NULL) leaf_->::RemyBuffers::Whisker::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::RemyBuffers::ConfigRange::Clear();
    }
    if (has_optimizer()) {
      if (optimizer_ != NULL) optimizer_->::RemyBuffers::OptimizationSettings::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WhiskerTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.WhiskerTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.MemoryRange domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .RemyBuffers.WhiskerTree children = 2;
      case 2: {
        if (tag == 18) {
         parse_children:
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_leaf;
        break;
      }

      // optional .RemyBuffers.Whisker leaf = 3;
      case 3: {
        if (tag == 26) {
         parse_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_config;
        break;
      }

      // optional .RemyBuffers.ConfigRange config = 4;
      case 4: {
        if (tag == 34) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_optimizer;
        break;
      }

      // optional .RemyBuffers.OptimizationSettings optimizer = 5;
      case 5: {
        if (tag == 42) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.WhiskerTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.WhiskerTree)
  return false;
#undef DO_
}

void WhiskerTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.WhiskerTree)
  // optional .RemyBuffers.MemoryRange domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->domain_, output);
  }

  // repeated .RemyBuffers.WhiskerTree children = 2;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  // optional .RemyBuffers.Whisker leaf = 3;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leaf_, output);
  }

  // optional .RemyBuffers.ConfigRange config = 4;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->config_, output);
  }

  // optional .RemyBuffers.OptimizationSettings optimizer = 5;
  if (has_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->optimizer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.WhiskerTree)
}

::google::protobuf::uint8* WhiskerTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.WhiskerTree)
  // optional .RemyBuffers.MemoryRange domain = 1;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->domain_, false, target);
  }

  // repeated .RemyBuffers.WhiskerTree children = 2;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->children(i), false, target);
  }

  // optional .RemyBuffers.Whisker leaf = 3;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leaf_, false, target);
  }

  // optional .RemyBuffers.ConfigRange config = 4;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->config_, false, target);
  }

  // optional .RemyBuffers.OptimizationSettings optimizer = 5;
  if (has_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->optimizer_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.WhiskerTree)
  return target;
}

int WhiskerTree::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.WhiskerTree)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional .RemyBuffers.MemoryRange domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->domain_);
    }

    // optional .RemyBuffers.Whisker leaf = 3;
    if (has_leaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leaf_);
    }

    // optional .RemyBuffers.ConfigRange config = 4;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional .RemyBuffers.OptimizationSettings optimizer = 5;
    if (has_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->optimizer_);
    }

  }
  // repeated .RemyBuffers.WhiskerTree children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiskerTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.WhiskerTree)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhiskerTree* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhiskerTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.WhiskerTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.WhiskerTree)
    MergeFrom(*source);
  }
}

void WhiskerTree::MergeFrom(const WhiskerTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.WhiskerTree)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      mutable_domain()->::RemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
    if (from.has_leaf()) {
      mutable_leaf()->::RemyBuffers::Whisker::MergeFrom(from.leaf());
    }
    if (from.has_config()) {
      mutable_config()->::RemyBuffers::ConfigRange::MergeFrom(from.config());
    }
    if (from.has_optimizer()) {
      mutable_optimizer()->::RemyBuffers::OptimizationSettings::MergeFrom(from.optimizer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WhiskerTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.WhiskerTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiskerTree::CopyFrom(const WhiskerTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.WhiskerTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiskerTree::IsInitialized() const {

  return true;
}

void WhiskerTree::Swap(WhiskerTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhiskerTree::InternalSwap(WhiskerTree* other) {
  std::swap(domain_, other->domain_);
  children_.UnsafeArenaSwap(&other->children_);
  std::swap(leaf_, other->leaf_);
  std::swap(config_, other->config_);
  std::swap(optimizer_, other->optimizer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhiskerTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiskerTree_descriptor_;
  metadata.reflection = WhiskerTree_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhiskerTree

// optional .RemyBuffers.MemoryRange domain = 1;
bool WhiskerTree::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WhiskerTree::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void WhiskerTree::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void WhiskerTree::clear_domain() {
  if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
  clear_has_domain();
}
const ::RemyBuffers::MemoryRange& WhiskerTree::domain() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
::RemyBuffers::MemoryRange* WhiskerTree::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    domain_ = new ::RemyBuffers::MemoryRange;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.domain)
  return domain_;
}
::RemyBuffers::MemoryRange* WhiskerTree::release_domain() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.domain)
  clear_has_domain();
  ::RemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}
void WhiskerTree::set_allocated_domain(::RemyBuffers::MemoryRange* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.domain)
}

// repeated .RemyBuffers.WhiskerTree children = 2;
int WhiskerTree::children_size() const {
  return children_.size();
}
void WhiskerTree::clear_children() {
  children_.Clear();
}
const ::RemyBuffers::WhiskerTree& WhiskerTree::children(int index) const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.children)
  return children_.Get(index);
}
::RemyBuffers::WhiskerTree* WhiskerTree::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.children)
  return children_.Mutable(index);
}
::RemyBuffers::WhiskerTree* WhiskerTree::add_children() {
  // @@protoc_insertion_point(field_add:RemyBuffers.WhiskerTree.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree >*
WhiskerTree::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:RemyBuffers.WhiskerTree.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree >&
WhiskerTree::children() const {
  // @@protoc_insertion_point(field_list:RemyBuffers.WhiskerTree.children)
  return children_;
}

// optional .RemyBuffers.Whisker leaf = 3;
bool WhiskerTree::has_leaf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WhiskerTree::set_has_leaf() {
  _has_bits_[0] |= 0x00000004u;
}
void WhiskerTree::clear_has_leaf() {
  _has_bits_[0] &= ~0x00000004u;
}
void WhiskerTree::clear_leaf() {
  if (leaf_ != NULL) leaf_->::RemyBuffers::Whisker::Clear();
  clear_has_leaf();
}
const ::RemyBuffers::Whisker& WhiskerTree::leaf() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.leaf)
  return leaf_ != NULL ? *leaf_ : *default_instance_->leaf_;
}
::RemyBuffers::Whisker* WhiskerTree::mutable_leaf() {
  set_has_leaf();
  if (leaf_ == NULL) {
    leaf_ = new ::RemyBuffers::Whisker;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.leaf)
  return leaf_;
}
::RemyBuffers::Whisker* WhiskerTree::release_leaf() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.leaf)
  clear_has_leaf();
  ::RemyBuffers::Whisker* temp = leaf_;
  leaf_ = NULL;
  return temp;
}
void WhiskerTree::set_allocated_leaf(::RemyBuffers::Whisker* leaf) {
  delete leaf_;
  leaf_ = leaf;
  if (leaf) {
    set_has_leaf();
  } else {
    clear_has_leaf();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.leaf)
}

// optional .RemyBuffers.ConfigRange config = 4;
bool WhiskerTree::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WhiskerTree::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
void WhiskerTree::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void WhiskerTree::clear_config() {
  if (config_ != NULL) config_->::RemyBuffers::ConfigRange::Clear();
  clear_has_config();
}
const ::RemyBuffers::ConfigRange& WhiskerTree::config() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::RemyBuffers::ConfigRange* WhiskerTree::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::RemyBuffers::ConfigRange;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.config)
  return config_;
}
::RemyBuffers::ConfigRange* WhiskerTree::release_config() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.config)
  clear_has_config();
  ::RemyBuffers::ConfigRange* temp = config_;
  config_ = NULL;
  return temp;
}
void WhiskerTree::set_allocated_config(::RemyBuffers::ConfigRange* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.config)
}

// optional .RemyBuffers.OptimizationSettings optimizer = 5;
bool WhiskerTree::has_optimizer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WhiskerTree::set_has_optimizer() {
  _has_bits_[0] |= 0x00000010u;
}
void WhiskerTree::clear_has_optimizer() {
  _has_bits_[0] &= ~0x00000010u;
}
void WhiskerTree::clear_optimizer() {
  if (optimizer_ != NULL) optimizer_->::RemyBuffers::OptimizationSettings::Clear();
  clear_has_optimizer();
}
const ::RemyBuffers::OptimizationSettings& WhiskerTree::optimizer() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.optimizer)
  return optimizer_ != NULL ? *optimizer_ : *default_instance_->optimizer_;
}
::RemyBuffers::OptimizationSettings* WhiskerTree::mutable_optimizer() {
  set_has_optimizer();
  if (optimizer_ == NULL) {
    optimizer_ = new ::RemyBuffers::OptimizationSettings;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.optimizer)
  return optimizer_;
}
::RemyBuffers::OptimizationSettings* WhiskerTree::release_optimizer() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.optimizer)
  clear_has_optimizer();
  ::RemyBuffers::OptimizationSettings* temp = optimizer_;
  optimizer_ = NULL;
  return temp;
}
void WhiskerTree::set_allocated_optimizer(::RemyBuffers::OptimizationSettings* optimizer) {
  delete optimizer_;
  optimizer_ = optimizer;
  if (optimizer) {
    set_has_optimizer();
  } else {
    clear_has_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.optimizer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryRange::kLowerFieldNumber;
const int MemoryRange::kUpperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryRange::MemoryRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.MemoryRange)
}

void MemoryRange::InitAsDefaultInstance() {
  lower_ = const_cast< ::RemyBuffers::Memory*>(&::RemyBuffers::Memory::default_instance());
  upper_ = const_cast< ::RemyBuffers::Memory*>(&::RemyBuffers::Memory::default_instance());
}

MemoryRange::MemoryRange(const MemoryRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.MemoryRange)
}

void MemoryRange::SharedCtor() {
  _cached_size_ = 0;
  lower_ = NULL;
  upper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryRange::~MemoryRange() {
  // @@protoc_insertion_point(destructor:RemyBuffers.MemoryRange)
  SharedDtor();
}

void MemoryRange::SharedDtor() {
  if (this != default_instance_) {
    delete lower_;
    delete upper_;
  }
}

void MemoryRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryRange_descriptor_;
}

const MemoryRange& MemoryRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

MemoryRange* MemoryRange::default_instance_ = NULL;

MemoryRange* MemoryRange::New(::google::protobuf::Arena* arena) const {
  MemoryRange* n = new MemoryRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryRange::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.MemoryRange)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_lower()) {
      if (lower_ != NULL) lower_->::RemyBuffers::Memory::Clear();
    }
    if (has_upper()) {
      if (upper_ != NULL) upper_->::RemyBuffers::Memory::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MemoryRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.MemoryRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.Memory lower = 11;
      case 11: {
        if (tag == 90) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_upper;
        break;
      }

      // optional .RemyBuffers.Memory upper = 12;
      case 12: {
        if (tag == 98) {
         parse_upper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.MemoryRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.MemoryRange)
  return false;
#undef DO_
}

void MemoryRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.MemoryRange)
  // optional .RemyBuffers.Memory lower = 11;
  if (has_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lower_, output);
  }

  // optional .RemyBuffers.Memory upper = 12;
  if (has_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->upper_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.MemoryRange)
}

::google::protobuf::uint8* MemoryRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.MemoryRange)
  // optional .RemyBuffers.Memory lower = 11;
  if (has_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lower_, false, target);
  }

  // optional .RemyBuffers.Memory upper = 12;
  if (has_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->upper_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.MemoryRange)
  return target;
}

int MemoryRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.MemoryRange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .RemyBuffers.Memory lower = 11;
    if (has_lower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lower_);
    }

    // optional .RemyBuffers.Memory upper = 12;
    if (has_upper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upper_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.MemoryRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MemoryRange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.MemoryRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.MemoryRange)
    MergeFrom(*source);
  }
}

void MemoryRange::MergeFrom(const MemoryRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.MemoryRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lower()) {
      mutable_lower()->::RemyBuffers::Memory::MergeFrom(from.lower());
    }
    if (from.has_upper()) {
      mutable_upper()->::RemyBuffers::Memory::MergeFrom(from.upper());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MemoryRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.MemoryRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRange::CopyFrom(const MemoryRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.MemoryRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRange::IsInitialized() const {

  return true;
}

void MemoryRange::Swap(MemoryRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryRange::InternalSwap(MemoryRange* other) {
  std::swap(lower_, other->lower_);
  std::swap(upper_, other->upper_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryRange_descriptor_;
  metadata.reflection = MemoryRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryRange

// optional .RemyBuffers.Memory lower = 11;
bool MemoryRange::has_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryRange::set_has_lower() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryRange::clear_has_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryRange::clear_lower() {
  if (lower_ != NULL) lower_->::RemyBuffers::Memory::Clear();
  clear_has_lower();
}
const ::RemyBuffers::Memory& MemoryRange::lower() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.MemoryRange.lower)
  return lower_ != NULL ? *lower_ : *default_instance_->lower_;
}
::RemyBuffers::Memory* MemoryRange::mutable_lower() {
  set_has_lower();
  if (lower_ == NULL) {
    lower_ = new ::RemyBuffers::Memory;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.MemoryRange.lower)
  return lower_;
}
::RemyBuffers::Memory* MemoryRange::release_lower() {
  // @@protoc_insertion_point(field_release:RemyBuffers.MemoryRange.lower)
  clear_has_lower();
  ::RemyBuffers::Memory* temp = lower_;
  lower_ = NULL;
  return temp;
}
void MemoryRange::set_allocated_lower(::RemyBuffers::Memory* lower) {
  delete lower_;
  lower_ = lower;
  if (lower) {
    set_has_lower();
  } else {
    clear_has_lower();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.MemoryRange.lower)
}

// optional .RemyBuffers.Memory upper = 12;
bool MemoryRange::has_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryRange::set_has_upper() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryRange::clear_has_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryRange::clear_upper() {
  if (upper_ != NULL) upper_->::RemyBuffers::Memory::Clear();
  clear_has_upper();
}
const ::RemyBuffers::Memory& MemoryRange::upper() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.MemoryRange.upper)
  return upper_ != NULL ? *upper_ : *default_instance_->upper_;
}
::RemyBuffers::Memory* MemoryRange::mutable_upper() {
  set_has_upper();
  if (upper_ == NULL) {
    upper_ = new ::RemyBuffers::Memory;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.MemoryRange.upper)
  return upper_;
}
::RemyBuffers::Memory* MemoryRange::release_upper() {
  // @@protoc_insertion_point(field_release:RemyBuffers.MemoryRange.upper)
  clear_has_upper();
  ::RemyBuffers::Memory* temp = upper_;
  upper_ = NULL;
  return temp;
}
void MemoryRange::set_allocated_upper(::RemyBuffers::Memory* upper) {
  delete upper_;
  upper_ = upper;
  if (upper) {
    set_has_upper();
  } else {
    clear_has_upper();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.MemoryRange.upper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kRecSendEwmaFieldNumber;
const int Memory::kRecRecEwmaFieldNumber;
const int Memory::kRttRatioFieldNumber;
const int Memory::kSlowRecRecEwmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.Memory)
}

void Memory::InitAsDefaultInstance() {
}

Memory::Memory(const Memory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.Memory)
}

void Memory::SharedCtor() {
  _cached_size_ = 0;
  rec_send_ewma_ = 0;
  rec_rec_ewma_ = 0;
  rtt_ratio_ = 0;
  slow_rec_rec_ewma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:RemyBuffers.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Memory_descriptor_;
}

const Memory& Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

Memory* Memory::default_instance_ = NULL;

Memory* Memory::New(::google::protobuf::Arena* arena) const {
  Memory* n = new Memory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.Memory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Memory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Memory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rec_send_ewma_, slow_rec_rec_ewma_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double rec_send_ewma = 21;
      case 21: {
        if (tag == 169) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rec_send_ewma_)));
          set_has_rec_send_ewma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_rec_rec_ewma;
        break;
      }

      // optional double rec_rec_ewma = 22;
      case 22: {
        if (tag == 177) {
         parse_rec_rec_ewma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rec_rec_ewma_)));
          set_has_rec_rec_ewma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_rtt_ratio;
        break;
      }

      // optional double rtt_ratio = 23;
      case 23: {
        if (tag == 185) {
         parse_rtt_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtt_ratio_)));
          set_has_rtt_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_slow_rec_rec_ewma;
        break;
      }

      // optional double slow_rec_rec_ewma = 24;
      case 24: {
        if (tag == 193) {
         parse_slow_rec_rec_ewma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slow_rec_rec_ewma_)));
          set_has_slow_rec_rec_ewma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.Memory)
  // optional double rec_send_ewma = 21;
  if (has_rec_send_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->rec_send_ewma(), output);
  }

  // optional double rec_rec_ewma = 22;
  if (has_rec_rec_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->rec_rec_ewma(), output);
  }

  // optional double rtt_ratio = 23;
  if (has_rtt_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->rtt_ratio(), output);
  }

  // optional double slow_rec_rec_ewma = 24;
  if (has_slow_rec_rec_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->slow_rec_rec_ewma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.Memory)
}

::google::protobuf::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.Memory)
  // optional double rec_send_ewma = 21;
  if (has_rec_send_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->rec_send_ewma(), target);
  }

  // optional double rec_rec_ewma = 22;
  if (has_rec_rec_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->rec_rec_ewma(), target);
  }

  // optional double rtt_ratio = 23;
  if (has_rtt_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->rtt_ratio(), target);
  }

  // optional double slow_rec_rec_ewma = 24;
  if (has_slow_rec_rec_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->slow_rec_rec_ewma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.Memory)
  return target;
}

int Memory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.Memory)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double rec_send_ewma = 21;
    if (has_rec_send_ewma()) {
      total_size += 2 + 8;
    }

    // optional double rec_rec_ewma = 22;
    if (has_rec_rec_ewma()) {
      total_size += 2 + 8;
    }

    // optional double rtt_ratio = 23;
    if (has_rtt_ratio()) {
      total_size += 2 + 8;
    }

    // optional double slow_rec_rec_ewma = 24;
    if (has_slow_rec_rec_ewma()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.Memory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Memory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.Memory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rec_send_ewma()) {
      set_rec_send_ewma(from.rec_send_ewma());
    }
    if (from.has_rec_rec_ewma()) {
      set_rec_rec_ewma(from.rec_rec_ewma());
    }
    if (from.has_rtt_ratio()) {
      set_rtt_ratio(from.rtt_ratio());
    }
    if (from.has_slow_rec_rec_ewma()) {
      set_slow_rec_rec_ewma(from.slow_rec_rec_ewma());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {

  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  std::swap(rec_send_ewma_, other->rec_send_ewma_);
  std::swap(rec_rec_ewma_, other->rec_rec_ewma_);
  std::swap(rtt_ratio_, other->rtt_ratio_);
  std::swap(slow_rec_rec_ewma_, other->slow_rec_rec_ewma_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Memory_descriptor_;
  metadata.reflection = Memory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Memory

// optional double rec_send_ewma = 21;
bool Memory::has_rec_send_ewma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Memory::set_has_rec_send_ewma() {
  _has_bits_[0] |= 0x00000001u;
}
void Memory::clear_has_rec_send_ewma() {
  _has_bits_[0] &= ~0x00000001u;
}
void Memory::clear_rec_send_ewma() {
  rec_send_ewma_ = 0;
  clear_has_rec_send_ewma();
}
 double Memory::rec_send_ewma() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.rec_send_ewma)
  return rec_send_ewma_;
}
 void Memory::set_rec_send_ewma(double value) {
  set_has_rec_send_ewma();
  rec_send_ewma_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.rec_send_ewma)
}

// optional double rec_rec_ewma = 22;
bool Memory::has_rec_rec_ewma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Memory::set_has_rec_rec_ewma() {
  _has_bits_[0] |= 0x00000002u;
}
void Memory::clear_has_rec_rec_ewma() {
  _has_bits_[0] &= ~0x00000002u;
}
void Memory::clear_rec_rec_ewma() {
  rec_rec_ewma_ = 0;
  clear_has_rec_rec_ewma();
}
 double Memory::rec_rec_ewma() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.rec_rec_ewma)
  return rec_rec_ewma_;
}
 void Memory::set_rec_rec_ewma(double value) {
  set_has_rec_rec_ewma();
  rec_rec_ewma_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.rec_rec_ewma)
}

// optional double rtt_ratio = 23;
bool Memory::has_rtt_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Memory::set_has_rtt_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void Memory::clear_has_rtt_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void Memory::clear_rtt_ratio() {
  rtt_ratio_ = 0;
  clear_has_rtt_ratio();
}
 double Memory::rtt_ratio() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.rtt_ratio)
  return rtt_ratio_;
}
 void Memory::set_rtt_ratio(double value) {
  set_has_rtt_ratio();
  rtt_ratio_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.rtt_ratio)
}

// optional double slow_rec_rec_ewma = 24;
bool Memory::has_slow_rec_rec_ewma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Memory::set_has_slow_rec_rec_ewma() {
  _has_bits_[0] |= 0x00000008u;
}
void Memory::clear_has_slow_rec_rec_ewma() {
  _has_bits_[0] &= ~0x00000008u;
}
void Memory::clear_slow_rec_rec_ewma() {
  slow_rec_rec_ewma_ = 0;
  clear_has_slow_rec_rec_ewma();
}
 double Memory::slow_rec_rec_ewma() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.slow_rec_rec_ewma)
  return slow_rec_rec_ewma_;
}
 void Memory::set_slow_rec_rec_ewma(double value) {
  set_has_slow_rec_rec_ewma();
  slow_rec_rec_ewma_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.slow_rec_rec_ewma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Whisker::kWindowIncrementFieldNumber;
const int Whisker::kWindowMultipleFieldNumber;
const int Whisker::kIntersendFieldNumber;
const int Whisker::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Whisker::Whisker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.Whisker)
}

void Whisker::InitAsDefaultInstance() {
  domain_ = const_cast< ::RemyBuffers::MemoryRange*>(&::RemyBuffers::MemoryRange::default_instance());
}

Whisker::Whisker(const Whisker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.Whisker)
}

void Whisker::SharedCtor() {
  _cached_size_ = 0;
  window_increment_ = 0;
  window_multiple_ = 0;
  intersend_ = 0;
  domain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Whisker::~Whisker() {
  // @@protoc_insertion_point(destructor:RemyBuffers.Whisker)
  SharedDtor();
}

void Whisker::SharedDtor() {
  if (this != default_instance_) {
    delete domain_;
  }
}

void Whisker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Whisker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Whisker_descriptor_;
}

const Whisker& Whisker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

Whisker* Whisker::default_instance_ = NULL;

Whisker* Whisker::New(::google::protobuf::Arena* arena) const {
  Whisker* n = new Whisker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Whisker::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.Whisker)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Whisker, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Whisker*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(window_multiple_, intersend_);
    window_increment_ = 0;
    if (has_domain()) {
      if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Whisker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.Whisker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 window_increment = 31;
      case 31: {
        if (tag == 248) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &window_increment_)));
          set_has_window_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_window_multiple;
        break;
      }

      // optional double window_multiple = 32;
      case 32: {
        if (tag == 257) {
         parse_window_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_multiple_)));
          set_has_window_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_intersend;
        break;
      }

      // optional double intersend = 33;
      case 33: {
        if (tag == 265) {
         parse_intersend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intersend_)));
          set_has_intersend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_domain;
        break;
      }

      // optional .RemyBuffers.MemoryRange domain = 34;
      case 34: {
        if (tag == 274) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.Whisker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.Whisker)
  return false;
#undef DO_
}

void Whisker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.Whisker)
  // optional sint32 window_increment = 31;
  if (has_window_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->window_increment(), output);
  }

  // optional double window_multiple = 32;
  if (has_window_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->window_multiple(), output);
  }

  // optional double intersend = 33;
  if (has_intersend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->intersend(), output);
  }

  // optional .RemyBuffers.MemoryRange domain = 34;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->domain_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.Whisker)
}

::google::protobuf::uint8* Whisker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.Whisker)
  // optional sint32 window_increment = 31;
  if (has_window_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->window_increment(), target);
  }

  // optional double window_multiple = 32;
  if (has_window_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->window_multiple(), target);
  }

  // optional double intersend = 33;
  if (has_intersend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->intersend(), target);
  }

  // optional .RemyBuffers.MemoryRange domain = 34;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->domain_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.Whisker)
  return target;
}

int Whisker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.Whisker)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 window_increment = 31;
    if (has_window_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->window_increment());
    }

    // optional double window_multiple = 32;
    if (has_window_multiple()) {
      total_size += 2 + 8;
    }

    // optional double intersend = 33;
    if (has_intersend()) {
      total_size += 2 + 8;
    }

    // optional .RemyBuffers.MemoryRange domain = 34;
    if (has_domain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->domain_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Whisker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.Whisker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Whisker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Whisker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.Whisker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.Whisker)
    MergeFrom(*source);
  }
}

void Whisker::MergeFrom(const Whisker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.Whisker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_increment()) {
      set_window_increment(from.window_increment());
    }
    if (from.has_window_multiple()) {
      set_window_multiple(from.window_multiple());
    }
    if (from.has_intersend()) {
      set_intersend(from.intersend());
    }
    if (from.has_domain()) {
      mutable_domain()->::RemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Whisker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.Whisker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Whisker::CopyFrom(const Whisker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.Whisker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Whisker::IsInitialized() const {

  return true;
}

void Whisker::Swap(Whisker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Whisker::InternalSwap(Whisker* other) {
  std::swap(window_increment_, other->window_increment_);
  std::swap(window_multiple_, other->window_multiple_);
  std::swap(intersend_, other->intersend_);
  std::swap(domain_, other->domain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Whisker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Whisker_descriptor_;
  metadata.reflection = Whisker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Whisker

// optional sint32 window_increment = 31;
bool Whisker::has_window_increment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Whisker::set_has_window_increment() {
  _has_bits_[0] |= 0x00000001u;
}
void Whisker::clear_has_window_increment() {
  _has_bits_[0] &= ~0x00000001u;
}
void Whisker::clear_window_increment() {
  window_increment_ = 0;
  clear_has_window_increment();
}
 ::google::protobuf::int32 Whisker::window_increment() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.window_increment)
  return window_increment_;
}
 void Whisker::set_window_increment(::google::protobuf::int32 value) {
  set_has_window_increment();
  window_increment_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Whisker.window_increment)
}

// optional double window_multiple = 32;
bool Whisker::has_window_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Whisker::set_has_window_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
void Whisker::clear_has_window_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
void Whisker::clear_window_multiple() {
  window_multiple_ = 0;
  clear_has_window_multiple();
}
 double Whisker::window_multiple() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.window_multiple)
  return window_multiple_;
}
 void Whisker::set_window_multiple(double value) {
  set_has_window_multiple();
  window_multiple_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Whisker.window_multiple)
}

// optional double intersend = 33;
bool Whisker::has_intersend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Whisker::set_has_intersend() {
  _has_bits_[0] |= 0x00000004u;
}
void Whisker::clear_has_intersend() {
  _has_bits_[0] &= ~0x00000004u;
}
void Whisker::clear_intersend() {
  intersend_ = 0;
  clear_has_intersend();
}
 double Whisker::intersend() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.intersend)
  return intersend_;
}
 void Whisker::set_intersend(double value) {
  set_has_intersend();
  intersend_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Whisker.intersend)
}

// optional .RemyBuffers.MemoryRange domain = 34;
bool Whisker::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Whisker::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
void Whisker::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
void Whisker::clear_domain() {
  if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
  clear_has_domain();
}
const ::RemyBuffers::MemoryRange& Whisker::domain() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
::RemyBuffers::MemoryRange* Whisker::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    domain_ = new ::RemyBuffers::MemoryRange;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.Whisker.domain)
  return domain_;
}
::RemyBuffers::MemoryRange* Whisker::release_domain() {
  // @@protoc_insertion_point(field_release:RemyBuffers.Whisker.domain)
  clear_has_domain();
  ::RemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}
void Whisker::set_allocated_domain(::RemyBuffers::MemoryRange* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.Whisker.domain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptimizationSetting::kMinValueFieldNumber;
const int OptimizationSetting::kMaxValueFieldNumber;
const int OptimizationSetting::kMinChangeFieldNumber;
const int OptimizationSetting::kMaxChangeFieldNumber;
const int OptimizationSetting::kMultiplierFieldNumber;
const int OptimizationSetting::kDefaultValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptimizationSetting::OptimizationSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.OptimizationSetting)
}

void OptimizationSetting::InitAsDefaultInstance() {
}

OptimizationSetting::OptimizationSetting(const OptimizationSetting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.OptimizationSetting)
}

void OptimizationSetting::SharedCtor() {
  _cached_size_ = 0;
  min_value_ = 0;
  max_value_ = 0;
  min_change_ = 0;
  max_change_ = 0;
  multiplier_ = 0;
  default_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptimizationSetting::~OptimizationSetting() {
  // @@protoc_insertion_point(destructor:RemyBuffers.OptimizationSetting)
  SharedDtor();
}

void OptimizationSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptimizationSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizationSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizationSetting_descriptor_;
}

const OptimizationSetting& OptimizationSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

OptimizationSetting* OptimizationSetting::default_instance_ = NULL;

OptimizationSetting* OptimizationSetting::New(::google::protobuf::Arena* arena) const {
  OptimizationSetting* n = new OptimizationSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptimizationSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.OptimizationSetting)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptimizationSetting, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptimizationSetting*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(min_value_, default_value_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OptimizationSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.OptimizationSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_value = 41;
      case 41: {
        if (tag == 329) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_max_value;
        break;
      }

      // optional double max_value = 42;
      case 42: {
        if (tag == 337) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_min_change;
        break;
      }

      // optional double min_change = 43;
      case 43: {
        if (tag == 345) {
         parse_min_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_change_)));
          set_has_min_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(353)) goto parse_max_change;
        break;
      }

      // optional double max_change = 44;
      case 44: {
        if (tag == 353) {
         parse_max_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_change_)));
          set_has_max_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_multiplier;
        break;
      }

      // optional double multiplier = 45;
      case 45: {
        if (tag == 361) {
         parse_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &multiplier_)));
          set_has_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(369)) goto parse_default_value;
        break;
      }

      // optional double default_value = 46;
      case 46: {
        if (tag == 369) {
         parse_default_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_value_)));
          set_has_default_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.OptimizationSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.OptimizationSetting)
  return false;
#undef DO_
}

void OptimizationSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.OptimizationSetting)
  // optional double min_value = 41;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->min_value(), output);
  }

  // optional double max_value = 42;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->max_value(), output);
  }

  // optional double min_change = 43;
  if (has_min_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->min_change(), output);
  }

  // optional double max_change = 44;
  if (has_max_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->max_change(), output);
  }

  // optional double multiplier = 45;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->multiplier(), output);
  }

  // optional double default_value = 46;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->default_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.OptimizationSetting)
}

::google::protobuf::uint8* OptimizationSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.OptimizationSetting)
  // optional double min_value = 41;
  if (has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->min_value(), target);
  }

  // optional double max_value = 42;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->max_value(), target);
  }

  // optional double min_change = 43;
  if (has_min_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->min_change(), target);
  }

  // optional double max_change = 44;
  if (has_max_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->max_change(), target);
  }

  // optional double multiplier = 45;
  if (has_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->multiplier(), target);
  }

  // optional double default_value = 46;
  if (has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->default_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.OptimizationSetting)
  return target;
}

int OptimizationSetting::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.OptimizationSetting)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double min_value = 41;
    if (has_min_value()) {
      total_size += 2 + 8;
    }

    // optional double max_value = 42;
    if (has_max_value()) {
      total_size += 2 + 8;
    }

    // optional double min_change = 43;
    if (has_min_change()) {
      total_size += 2 + 8;
    }

    // optional double max_change = 44;
    if (has_max_change()) {
      total_size += 2 + 8;
    }

    // optional double multiplier = 45;
    if (has_multiplier()) {
      total_size += 2 + 8;
    }

    // optional double default_value = 46;
    if (has_default_value()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizationSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.OptimizationSetting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OptimizationSetting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptimizationSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.OptimizationSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.OptimizationSetting)
    MergeFrom(*source);
  }
}

void OptimizationSetting::MergeFrom(const OptimizationSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.OptimizationSetting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_min_change()) {
      set_min_change(from.min_change());
    }
    if (from.has_max_change()) {
      set_max_change(from.max_change());
    }
    if (from.has_multiplier()) {
      set_multiplier(from.multiplier());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OptimizationSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.OptimizationSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationSetting::CopyFrom(const OptimizationSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.OptimizationSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationSetting::IsInitialized() const {

  return true;
}

void OptimizationSetting::Swap(OptimizationSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptimizationSetting::InternalSwap(OptimizationSetting* other) {
  std::swap(min_value_, other->min_value_);
  std::swap(max_value_, other->max_value_);
  std::swap(min_change_, other->min_change_);
  std::swap(max_change_, other->max_change_);
  std::swap(multiplier_, other->multiplier_);
  std::swap(default_value_, other->default_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptimizationSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizationSetting_descriptor_;
  metadata.reflection = OptimizationSetting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptimizationSetting

// optional double min_value = 41;
bool OptimizationSetting::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OptimizationSetting::set_has_min_value() {
  _has_bits_[0] |= 0x00000001u;
}
void OptimizationSetting::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void OptimizationSetting::clear_min_value() {
  min_value_ = 0;
  clear_has_min_value();
}
 double OptimizationSetting::min_value() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.min_value)
  return min_value_;
}
 void OptimizationSetting::set_min_value(double value) {
  set_has_min_value();
  min_value_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.min_value)
}

// optional double max_value = 42;
bool OptimizationSetting::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OptimizationSetting::set_has_max_value() {
  _has_bits_[0] |= 0x00000002u;
}
void OptimizationSetting::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void OptimizationSetting::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
 double OptimizationSetting::max_value() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.max_value)
  return max_value_;
}
 void OptimizationSetting::set_max_value(double value) {
  set_has_max_value();
  max_value_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.max_value)
}

// optional double min_change = 43;
bool OptimizationSetting::has_min_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OptimizationSetting::set_has_min_change() {
  _has_bits_[0] |= 0x00000004u;
}
void OptimizationSetting::clear_has_min_change() {
  _has_bits_[0] &= ~0x00000004u;
}
void OptimizationSetting::clear_min_change() {
  min_change_ = 0;
  clear_has_min_change();
}
 double OptimizationSetting::min_change() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.min_change)
  return min_change_;
}
 void OptimizationSetting::set_min_change(double value) {
  set_has_min_change();
  min_change_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.min_change)
}

// optional double max_change = 44;
bool OptimizationSetting::has_max_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OptimizationSetting::set_has_max_change() {
  _has_bits_[0] |= 0x00000008u;
}
void OptimizationSetting::clear_has_max_change() {
  _has_bits_[0] &= ~0x00000008u;
}
void OptimizationSetting::clear_max_change() {
  max_change_ = 0;
  clear_has_max_change();
}
 double OptimizationSetting::max_change() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.max_change)
  return max_change_;
}
 void OptimizationSetting::set_max_change(double value) {
  set_has_max_change();
  max_change_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.max_change)
}

// optional double multiplier = 45;
bool OptimizationSetting::has_multiplier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OptimizationSetting::set_has_multiplier() {
  _has_bits_[0] |= 0x00000010u;
}
void OptimizationSetting::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000010u;
}
void OptimizationSetting::clear_multiplier() {
  multiplier_ = 0;
  clear_has_multiplier();
}
 double OptimizationSetting::multiplier() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.multiplier)
  return multiplier_;
}
 void OptimizationSetting::set_multiplier(double value) {
  set_has_multiplier();
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.multiplier)
}

// optional double default_value = 46;
bool OptimizationSetting::has_default_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OptimizationSetting::set_has_default_value() {
  _has_bits_[0] |= 0x00000020u;
}
void OptimizationSetting::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void OptimizationSetting::clear_default_value() {
  default_value_ = 0;
  clear_has_default_value();
}
 double OptimizationSetting::default_value() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.default_value)
  return default_value_;
}
 void OptimizationSetting::set_default_value(double value) {
  set_has_default_value();
  default_value_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.default_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptimizationSettings::kWindowIncrementFieldNumber;
const int OptimizationSettings::kWindowMultipleFieldNumber;
const int OptimizationSettings::kIntersendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptimizationSettings::OptimizationSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.OptimizationSettings)
}

void OptimizationSettings::InitAsDefaultInstance() {
  window_increment_ = const_cast< ::RemyBuffers::OptimizationSetting*>(&::RemyBuffers::OptimizationSetting::default_instance());
  window_multiple_ = const_cast< ::RemyBuffers::OptimizationSetting*>(&::RemyBuffers::OptimizationSetting::default_instance());
  intersend_ = const_cast< ::RemyBuffers::OptimizationSetting*>(&::RemyBuffers::OptimizationSetting::default_instance());
}

OptimizationSettings::OptimizationSettings(const OptimizationSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.OptimizationSettings)
}

void OptimizationSettings::SharedCtor() {
  _cached_size_ = 0;
  window_increment_ = NULL;
  window_multiple_ = NULL;
  intersend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptimizationSettings::~OptimizationSettings() {
  // @@protoc_insertion_point(destructor:RemyBuffers.OptimizationSettings)
  SharedDtor();
}

void OptimizationSettings::SharedDtor() {
  if (this != default_instance_) {
    delete window_increment_;
    delete window_multiple_;
    delete intersend_;
  }
}

void OptimizationSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizationSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizationSettings_descriptor_;
}

const OptimizationSettings& OptimizationSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

OptimizationSettings* OptimizationSettings::default_instance_ = NULL;

OptimizationSettings* OptimizationSettings::New(::google::protobuf::Arena* arena) const {
  OptimizationSettings* n = new OptimizationSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptimizationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.OptimizationSettings)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_window_increment()) {
      if (window_increment_ != NULL) window_increment_->::RemyBuffers::OptimizationSetting::Clear();
    }
    if (has_window_multiple()) {
      if (window_multiple_ != NULL) window_multiple_->::RemyBuffers::OptimizationSetting::Clear();
    }
    if (has_intersend()) {
      if (intersend_ != NULL) intersend_->::RemyBuffers::OptimizationSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OptimizationSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.OptimizationSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.OptimizationSetting window_increment = 51;
      case 51: {
        if (tag == 410) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_window_multiple;
        break;
      }

      // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
      case 52: {
        if (tag == 418) {
         parse_window_multiple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_multiple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_intersend;
        break;
      }

      // optional .RemyBuffers.OptimizationSetting intersend = 53;
      case 53: {
        if (tag == 426) {
         parse_intersend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intersend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.OptimizationSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.OptimizationSettings)
  return false;
#undef DO_
}

void OptimizationSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.OptimizationSettings)
  // optional .RemyBuffers.OptimizationSetting window_increment = 51;
  if (has_window_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->window_increment_, output);
  }

  // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
  if (has_window_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->window_multiple_, output);
  }

  // optional .RemyBuffers.OptimizationSetting intersend = 53;
  if (has_intersend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->intersend_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.OptimizationSettings)
}

::google::protobuf::uint8* OptimizationSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.OptimizationSettings)
  // optional .RemyBuffers.OptimizationSetting window_increment = 51;
  if (has_window_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->window_increment_, false, target);
  }

  // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
  if (has_window_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *this->window_multiple_, false, target);
  }

  // optional .RemyBuffers.OptimizationSetting intersend = 53;
  if (has_intersend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *this->intersend_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.OptimizationSettings)
  return target;
}

int OptimizationSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.OptimizationSettings)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .RemyBuffers.OptimizationSetting window_increment = 51;
    if (has_window_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_increment_);
    }

    // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
    if (has_window_multiple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_multiple_);
    }

    // optional .RemyBuffers.OptimizationSetting intersend = 53;
    if (has_intersend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->intersend_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizationSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.OptimizationSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OptimizationSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptimizationSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.OptimizationSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.OptimizationSettings)
    MergeFrom(*source);
  }
}

void OptimizationSettings::MergeFrom(const OptimizationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.OptimizationSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_increment()) {
      mutable_window_increment()->::RemyBuffers::OptimizationSetting::MergeFrom(from.window_increment());
    }
    if (from.has_window_multiple()) {
      mutable_window_multiple()->::RemyBuffers::OptimizationSetting::MergeFrom(from.window_multiple());
    }
    if (from.has_intersend()) {
      mutable_intersend()->::RemyBuffers::OptimizationSetting::MergeFrom(from.intersend());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OptimizationSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.OptimizationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationSettings::CopyFrom(const OptimizationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.OptimizationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationSettings::IsInitialized() const {

  return true;
}

void OptimizationSettings::Swap(OptimizationSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptimizationSettings::InternalSwap(OptimizationSettings* other) {
  std::swap(window_increment_, other->window_increment_);
  std::swap(window_multiple_, other->window_multiple_);
  std::swap(intersend_, other->intersend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptimizationSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizationSettings_descriptor_;
  metadata.reflection = OptimizationSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptimizationSettings

// optional .RemyBuffers.OptimizationSetting window_increment = 51;
bool OptimizationSettings::has_window_increment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OptimizationSettings::set_has_window_increment() {
  _has_bits_[0] |= 0x00000001u;
}
void OptimizationSettings::clear_has_window_increment() {
  _has_bits_[0] &= ~0x00000001u;
}
void OptimizationSettings::clear_window_increment() {
  if (window_increment_ != NULL) window_increment_->::RemyBuffers::OptimizationSetting::Clear();
  clear_has_window_increment();
}
const ::RemyBuffers::OptimizationSetting& OptimizationSettings::window_increment() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSettings.window_increment)
  return window_increment_ != NULL ? *window_increment_ : *default_instance_->window_increment_;
}
::RemyBuffers::OptimizationSetting* OptimizationSettings::mutable_window_increment() {
  set_has_window_increment();
  if (window_increment_ == NULL) {
    window_increment_ = new ::RemyBuffers::OptimizationSetting;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.OptimizationSettings.window_increment)
  return window_increment_;
}
::RemyBuffers::OptimizationSetting* OptimizationSettings::release_window_increment() {
  // @@protoc_insertion_point(field_release:RemyBuffers.OptimizationSettings.window_increment)
  clear_has_window_increment();
  ::RemyBuffers::OptimizationSetting* temp = window_increment_;
  window_increment_ = NULL;
  return temp;
}
void OptimizationSettings::set_allocated_window_increment(::RemyBuffers::OptimizationSetting* window_increment) {
  delete window_increment_;
  window_increment_ = window_increment;
  if (window_increment) {
    set_has_window_increment();
  } else {
    clear_has_window_increment();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.OptimizationSettings.window_increment)
}

// optional .RemyBuffers.OptimizationSetting window_multiple = 52;
bool OptimizationSettings::has_window_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OptimizationSettings::set_has_window_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
void OptimizationSettings::clear_has_window_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
void OptimizationSettings::clear_window_multiple() {
  if (window_multiple_ != NULL) window_multiple_->::RemyBuffers::OptimizationSetting::Clear();
  clear_has_window_multiple();
}
const ::RemyBuffers::OptimizationSetting& OptimizationSettings::window_multiple() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSettings.window_multiple)
  return window_multiple_ != NULL ? *window_multiple_ : *default_instance_->window_multiple_;
}
::RemyBuffers::OptimizationSetting* OptimizationSettings::mutable_window_multiple() {
  set_has_window_multiple();
  if (window_multiple_ == NULL) {
    window_multiple_ = new ::RemyBuffers::OptimizationSetting;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.OptimizationSettings.window_multiple)
  return window_multiple_;
}
::RemyBuffers::OptimizationSetting* OptimizationSettings::release_window_multiple() {
  // @@protoc_insertion_point(field_release:RemyBuffers.OptimizationSettings.window_multiple)
  clear_has_window_multiple();
  ::RemyBuffers::OptimizationSetting* temp = window_multiple_;
  window_multiple_ = NULL;
  return temp;
}
void OptimizationSettings::set_allocated_window_multiple(::RemyBuffers::OptimizationSetting* window_multiple) {
  delete window_multiple_;
  window_multiple_ = window_multiple;
  if (window_multiple) {
    set_has_window_multiple();
  } else {
    clear_has_window_multiple();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.OptimizationSettings.window_multiple)
}

// optional .RemyBuffers.OptimizationSetting intersend = 53;
bool OptimizationSettings::has_intersend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OptimizationSettings::set_has_intersend() {
  _has_bits_[0] |= 0x00000004u;
}
void OptimizationSettings::clear_has_intersend() {
  _has_bits_[0] &= ~0x00000004u;
}
void OptimizationSettings::clear_intersend() {
  if (intersend_ != NULL) intersend_->::RemyBuffers::OptimizationSetting::Clear();
  clear_has_intersend();
}
const ::RemyBuffers::OptimizationSetting& OptimizationSettings::intersend() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSettings.intersend)
  return intersend_ != NULL ? *intersend_ : *default_instance_->intersend_;
}
::RemyBuffers::OptimizationSetting* OptimizationSettings::mutable_intersend() {
  set_has_intersend();
  if (intersend_ == NULL) {
    intersend_ = new ::RemyBuffers::OptimizationSetting;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.OptimizationSettings.intersend)
  return intersend_;
}
::RemyBuffers::OptimizationSetting* OptimizationSettings::release_intersend() {
  // @@protoc_insertion_point(field_release:RemyBuffers.OptimizationSettings.intersend)
  clear_has_intersend();
  ::RemyBuffers::OptimizationSetting* temp = intersend_;
  intersend_ = NULL;
  return temp;
}
void OptimizationSettings::set_allocated_intersend(::RemyBuffers::OptimizationSetting* intersend) {
  delete intersend_;
  intersend_ = intersend;
  if (intersend) {
    set_has_intersend();
  } else {
    clear_has_intersend();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.OptimizationSettings.intersend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kLowFieldNumber;
const int Range::kHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.Range)
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.Range)
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  low_ = 0;
  high_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:RemyBuffers.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New(::google::protobuf::Arena* arena) const {
  Range* n = new Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.Range)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Range, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Range*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(low_, high_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double low = 61;
      case 61: {
        if (tag == 489) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(497)) goto parse_high;
        break;
      }

      // optional double high = 62;
      case 62: {
        if (tag == 497) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.Range)
  // optional double low = 61;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->low(), output);
  }

  // optional double high = 62;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(62, this->high(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.Range)
  // optional double low = 61;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->low(), target);
  }

  // optional double high = 62;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(62, this->high(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.Range)
  return target;
}

int Range::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.Range)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double low = 61;
    if (has_low()) {
      total_size += 2 + 8;
    }

    // optional double high = 62;
    if (has_high()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.Range)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Range* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.Range)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {

  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  std::swap(low_, other->low_);
  std::swap(high_, other->high_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// optional double low = 61;
bool Range::has_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Range::set_has_low() {
  _has_bits_[0] |= 0x00000001u;
}
void Range::clear_has_low() {
  _has_bits_[0] &= ~0x00000001u;
}
void Range::clear_low() {
  low_ = 0;
  clear_has_low();
}
 double Range::low() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Range.low)
  return low_;
}
 void Range::set_low(double value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Range.low)
}

// optional double high = 62;
bool Range::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Range::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
void Range::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
void Range::clear_high() {
  high_ = 0;
  clear_has_high();
}
 double Range::high() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Range.high)
  return high_;
}
 void Range::set_high(double value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Range.high)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRange::kLinkPacketsPerMsFieldNumber;
const int ConfigRange::kRttFieldNumber;
const int ConfigRange::kNumSendersFieldNumber;
const int ConfigRange::kLinkLimitFieldNumber;
const int ConfigRange::kMeanOffDurationFieldNumber;
const int ConfigRange::kMeanOnDurationFieldNumber;
const int ConfigRange::kDropRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRange::ConfigRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.ConfigRange)
}

void ConfigRange::InitAsDefaultInstance() {
  link_packets_per_ms_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  rtt_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  num_senders_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  link_limit_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  drop_rate_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
}

ConfigRange::ConfigRange(const ConfigRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.ConfigRange)
}

void ConfigRange::SharedCtor() {
  _cached_size_ = 0;
  link_packets_per_ms_ = NULL;
  rtt_ = NULL;
  num_senders_ = NULL;
  link_limit_ = NULL;
  mean_off_duration_ = 0;
  mean_on_duration_ = 0;
  drop_rate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigRange::~ConfigRange() {
  // @@protoc_insertion_point(destructor:RemyBuffers.ConfigRange)
  SharedDtor();
}

void ConfigRange::SharedDtor() {
  if (this != default_instance_) {
    delete link_packets_per_ms_;
    delete rtt_;
    delete num_senders_;
    delete link_limit_;
    delete drop_rate_;
  }
}

void ConfigRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigRange_descriptor_;
}

const ConfigRange& ConfigRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

ConfigRange* ConfigRange::default_instance_ = NULL;

ConfigRange* ConfigRange::New(::google::protobuf::Arena* arena) const {
  ConfigRange* n = new ConfigRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigRange::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.ConfigRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(mean_off_duration_, mean_on_duration_);
    if (has_link_packets_per_ms()) {
      if (link_packets_per_ms_ != NULL) link_packets_per_ms_->::RemyBuffers::Range::Clear();
    }
    if (has_rtt()) {
      if (rtt_ != NULL) rtt_->::RemyBuffers::Range::Clear();
    }
    if (has_num_senders()) {
      if (num_senders_ != NULL) num_senders_->::RemyBuffers::Range::Clear();
    }
    if (has_link_limit()) {
      if (link_limit_ != NULL) link_limit_->::RemyBuffers::Range::Clear();
    }
    if (has_drop_rate()) {
      if (drop_rate_ != NULL) drop_rate_->::RemyBuffers::Range::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.ConfigRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.Range link_packets_per_ms = 71;
      case 71: {
        if (tag == 570) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_packets_per_ms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_rtt;
        break;
      }

      // optional .RemyBuffers.Range rtt = 72;
      case 72: {
        if (tag == 578) {
         parse_rtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_num_senders;
        break;
      }

      // optional .RemyBuffers.Range num_senders = 73;
      case 73: {
        if (tag == 586) {
         parse_num_senders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num_senders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_link_limit;
        break;
      }

      // optional .RemyBuffers.Range link_limit = 74;
      case 74: {
        if (tag == 594) {
         parse_link_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(649)) goto parse_mean_off_duration;
        break;
      }

      // optional double mean_off_duration = 81;
      case 81: {
        if (tag == 649) {
         parse_mean_off_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_off_duration_)));
          set_has_mean_off_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(657)) goto parse_mean_on_duration;
        break;
      }

      // optional double mean_on_duration = 82;
      case 82: {
        if (tag == 657) {
         parse_mean_on_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_on_duration_)));
          set_has_mean_on_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_drop_rate;
        break;
      }

      // optional .RemyBuffers.Range drop_rate = 83;
      case 83: {
        if (tag == 666) {
         parse_drop_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.ConfigRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.ConfigRange)
  return false;
#undef DO_
}

void ConfigRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.ConfigRange)
  // optional .RemyBuffers.Range link_packets_per_ms = 71;
  if (has_link_packets_per_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, *this->link_packets_per_ms_, output);
  }

  // optional .RemyBuffers.Range rtt = 72;
  if (has_rtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, *this->rtt_, output);
  }

  // optional .RemyBuffers.Range num_senders = 73;
  if (has_num_senders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, *this->num_senders_, output);
  }

  // optional .RemyBuffers.Range link_limit = 74;
  if (has_link_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, *this->link_limit_, output);
  }

  // optional double mean_off_duration = 81;
  if (has_mean_off_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(81, this->mean_off_duration(), output);
  }

  // optional double mean_on_duration = 82;
  if (has_mean_on_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(82, this->mean_on_duration(), output);
  }

  // optional .RemyBuffers.Range drop_rate = 83;
  if (has_drop_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, *this->drop_rate_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.ConfigRange)
}

::google::protobuf::uint8* ConfigRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.ConfigRange)
  // optional .RemyBuffers.Range link_packets_per_ms = 71;
  if (has_link_packets_per_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        71, *this->link_packets_per_ms_, false, target);
  }

  // optional .RemyBuffers.Range rtt = 72;
  if (has_rtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        72, *this->rtt_, false, target);
  }

  // optional .RemyBuffers.Range num_senders = 73;
  if (has_num_senders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        73, *this->num_senders_, false, target);
  }

  // optional .RemyBuffers.Range link_limit = 74;
  if (has_link_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        74, *this->link_limit_, false, target);
  }

  // optional double mean_off_duration = 81;
  if (has_mean_off_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(81, this->mean_off_duration(), target);
  }

  // optional double mean_on_duration = 82;
  if (has_mean_on_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(82, this->mean_on_duration(), target);
  }

  // optional .RemyBuffers.Range drop_rate = 83;
  if (has_drop_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        83, *this->drop_rate_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.ConfigRange)
  return target;
}

int ConfigRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.ConfigRange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .RemyBuffers.Range link_packets_per_ms = 71;
    if (has_link_packets_per_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->link_packets_per_ms_);
    }

    // optional .RemyBuffers.Range rtt = 72;
    if (has_rtt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rtt_);
    }

    // optional .RemyBuffers.Range num_senders = 73;
    if (has_num_senders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->num_senders_);
    }

    // optional .RemyBuffers.Range link_limit = 74;
    if (has_link_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->link_limit_);
    }

    // optional double mean_off_duration = 81;
    if (has_mean_off_duration()) {
      total_size += 2 + 8;
    }

    // optional double mean_on_duration = 82;
    if (has_mean_on_duration()) {
      total_size += 2 + 8;
    }

    // optional .RemyBuffers.Range drop_rate = 83;
    if (has_drop_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->drop_rate_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.ConfigRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigRange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.ConfigRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.ConfigRange)
    MergeFrom(*source);
  }
}

void ConfigRange::MergeFrom(const ConfigRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.ConfigRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_link_packets_per_ms()) {
      mutable_link_packets_per_ms()->::RemyBuffers::Range::MergeFrom(from.link_packets_per_ms());
    }
    if (from.has_rtt()) {
      mutable_rtt()->::RemyBuffers::Range::MergeFrom(from.rtt());
    }
    if (from.has_num_senders()) {
      mutable_num_senders()->::RemyBuffers::Range::MergeFrom(from.num_senders());
    }
    if (from.has_link_limit()) {
      mutable_link_limit()->::RemyBuffers::Range::MergeFrom(from.link_limit());
    }
    if (from.has_mean_off_duration()) {
      set_mean_off_duration(from.mean_off_duration());
    }
    if (from.has_mean_on_duration()) {
      set_mean_on_duration(from.mean_on_duration());
    }
    if (from.has_drop_rate()) {
      mutable_drop_rate()->::RemyBuffers::Range::MergeFrom(from.drop_rate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfigRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.ConfigRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRange::CopyFrom(const ConfigRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.ConfigRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRange::IsInitialized() const {

  return true;
}

void ConfigRange::Swap(ConfigRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigRange::InternalSwap(ConfigRange* other) {
  std::swap(link_packets_per_ms_, other->link_packets_per_ms_);
  std::swap(rtt_, other->rtt_);
  std::swap(num_senders_, other->num_senders_);
  std::swap(link_limit_, other->link_limit_);
  std::swap(mean_off_duration_, other->mean_off_duration_);
  std::swap(mean_on_duration_, other->mean_on_duration_);
  std::swap(drop_rate_, other->drop_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigRange_descriptor_;
  metadata.reflection = ConfigRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigRange

// optional .RemyBuffers.Range link_packets_per_ms = 71;
bool ConfigRange::has_link_packets_per_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigRange::set_has_link_packets_per_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigRange::clear_has_link_packets_per_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigRange::clear_link_packets_per_ms() {
  if (link_packets_per_ms_ != NULL) link_packets_per_ms_->::RemyBuffers::Range::Clear();
  clear_has_link_packets_per_ms();
}
const ::RemyBuffers::Range& ConfigRange::link_packets_per_ms() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.link_packets_per_ms)
  return link_packets_per_ms_ != NULL ? *link_packets_per_ms_ : *default_instance_->link_packets_per_ms_;
}
::RemyBuffers::Range* ConfigRange::mutable_link_packets_per_ms() {
  set_has_link_packets_per_ms();
  if (link_packets_per_ms_ == NULL) {
    link_packets_per_ms_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.link_packets_per_ms)
  return link_packets_per_ms_;
}
::RemyBuffers::Range* ConfigRange::release_link_packets_per_ms() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.link_packets_per_ms)
  clear_has_link_packets_per_ms();
  ::RemyBuffers::Range* temp = link_packets_per_ms_;
  link_packets_per_ms_ = NULL;
  return temp;
}
void ConfigRange::set_allocated_link_packets_per_ms(::RemyBuffers::Range* link_packets_per_ms) {
  delete link_packets_per_ms_;
  link_packets_per_ms_ = link_packets_per_ms;
  if (link_packets_per_ms) {
    set_has_link_packets_per_ms();
  } else {
    clear_has_link_packets_per_ms();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.link_packets_per_ms)
}

// optional .RemyBuffers.Range rtt = 72;
bool ConfigRange::has_rtt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigRange::set_has_rtt() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigRange::clear_has_rtt() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigRange::clear_rtt() {
  if (rtt_ != NULL) rtt_->::RemyBuffers::Range::Clear();
  clear_has_rtt();
}
const ::RemyBuffers::Range& ConfigRange::rtt() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.rtt)
  return rtt_ != NULL ? *rtt_ : *default_instance_->rtt_;
}
::RemyBuffers::Range* ConfigRange::mutable_rtt() {
  set_has_rtt();
  if (rtt_ == NULL) {
    rtt_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.rtt)
  return rtt_;
}
::RemyBuffers::Range* ConfigRange::release_rtt() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.rtt)
  clear_has_rtt();
  ::RemyBuffers::Range* temp = rtt_;
  rtt_ = NULL;
  return temp;
}
void ConfigRange::set_allocated_rtt(::RemyBuffers::Range* rtt) {
  delete rtt_;
  rtt_ = rtt;
  if (rtt) {
    set_has_rtt();
  } else {
    clear_has_rtt();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.rtt)
}

// optional .RemyBuffers.Range num_senders = 73;
bool ConfigRange::has_num_senders() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigRange::set_has_num_senders() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigRange::clear_has_num_senders() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigRange::clear_num_senders() {
  if (num_senders_ != NULL) num_senders_->::RemyBuffers::Range::Clear();
  clear_has_num_senders();
}
const ::RemyBuffers::Range& ConfigRange::num_senders() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.num_senders)
  return num_senders_ != NULL ? *num_senders_ : *default_instance_->num_senders_;
}
::RemyBuffers::Range* ConfigRange::mutable_num_senders() {
  set_has_num_senders();
  if (num_senders_ == NULL) {
    num_senders_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.num_senders)
  return num_senders_;
}
::RemyBuffers::Range* ConfigRange::release_num_senders() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.num_senders)
  clear_has_num_senders();
  ::RemyBuffers::Range* temp = num_senders_;
  num_senders_ = NULL;
  return temp;
}
void ConfigRange::set_allocated_num_senders(::RemyBuffers::Range* num_senders) {
  delete num_senders_;
  num_senders_ = num_senders;
  if (num_senders) {
    set_has_num_senders();
  } else {
    clear_has_num_senders();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.num_senders)
}

// optional .RemyBuffers.Range link_limit = 74;
bool ConfigRange::has_link_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigRange::set_has_link_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigRange::clear_has_link_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigRange::clear_link_limit() {
  if (link_limit_ != NULL) link_limit_->::RemyBuffers::Range::Clear();
  clear_has_link_limit();
}
const ::RemyBuffers::Range& ConfigRange::link_limit() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.link_limit)
  return link_limit_ != NULL ? *link_limit_ : *default_instance_->link_limit_;
}
::RemyBuffers::Range* ConfigRange::mutable_link_limit() {
  set_has_link_limit();
  if (link_limit_ == NULL) {
    link_limit_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.link_limit)
  return link_limit_;
}
::RemyBuffers::Range* ConfigRange::release_link_limit() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.link_limit)
  clear_has_link_limit();
  ::RemyBuffers::Range* temp = link_limit_;
  link_limit_ = NULL;
  return temp;
}
void ConfigRange::set_allocated_link_limit(::RemyBuffers::Range* link_limit) {
  delete link_limit_;
  link_limit_ = link_limit;
  if (link_limit) {
    set_has_link_limit();
  } else {
    clear_has_link_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.link_limit)
}

// optional double mean_off_duration = 81;
bool ConfigRange::has_mean_off_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConfigRange::set_has_mean_off_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void ConfigRange::clear_has_mean_off_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConfigRange::clear_mean_off_duration() {
  mean_off_duration_ = 0;
  clear_has_mean_off_duration();
}
 double ConfigRange::mean_off_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.mean_off_duration)
  return mean_off_duration_;
}
 void ConfigRange::set_mean_off_duration(double value) {
  set_has_mean_off_duration();
  mean_off_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.ConfigRange.mean_off_duration)
}

// optional double mean_on_duration = 82;
bool ConfigRange::has_mean_on_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConfigRange::set_has_mean_on_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void ConfigRange::clear_has_mean_on_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConfigRange::clear_mean_on_duration() {
  mean_on_duration_ = 0;
  clear_has_mean_on_duration();
}
 double ConfigRange::mean_on_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.mean_on_duration)
  return mean_on_duration_;
}
 void ConfigRange::set_mean_on_duration(double value) {
  set_has_mean_on_duration();
  mean_on_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.ConfigRange.mean_on_duration)
}

// optional .RemyBuffers.Range drop_rate = 83;
bool ConfigRange::has_drop_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConfigRange::set_has_drop_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void ConfigRange::clear_has_drop_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConfigRange::clear_drop_rate() {
  if (drop_rate_ != NULL) drop_rate_->::RemyBuffers::Range::Clear();
  clear_has_drop_rate();
}
const ::RemyBuffers::Range& ConfigRange::drop_rate() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.drop_rate)
  return drop_rate_ != NULL ? *drop_rate_ : *default_instance_->drop_rate_;
}
::RemyBuffers::Range* ConfigRange::mutable_drop_rate() {
  set_has_drop_rate();
  if (drop_rate_ == NULL) {
    drop_rate_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.drop_rate)
  return drop_rate_;
}
::RemyBuffers::Range* ConfigRange::release_drop_rate() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.drop_rate)
  clear_has_drop_rate();
  ::RemyBuffers::Range* temp = drop_rate_;
  drop_rate_ = NULL;
  return temp;
}
void ConfigRange::set_allocated_drop_rate(::RemyBuffers::Range* drop_rate) {
  delete drop_rate_;
  drop_rate_ = drop_rate;
  if (drop_rate) {
    set_has_drop_rate();
  } else {
    clear_has_drop_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.drop_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetConfig::kMeanOnDurationFieldNumber;
const int NetConfig::kMeanOffDurationFieldNumber;
const int NetConfig::kNumSendersFieldNumber;
const int NetConfig::kLinkPptFieldNumber;
const int NetConfig::kDelayFieldNumber;
const int NetConfig::kLinkLimitFieldNumber;
const int NetConfig::kDropRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetConfig::NetConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemyBuffers.NetConfig)
}

void NetConfig::InitAsDefaultInstance() {
}

NetConfig::NetConfig(const NetConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemyBuffers.NetConfig)
}

void NetConfig::SharedCtor() {
  _cached_size_ = 0;
  mean_on_duration_ = 0;
  mean_off_duration_ = 0;
  num_senders_ = 0u;
  link_ppt_ = 0;
  delay_ = 0;
  link_limit_ = 0u;
  drop_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetConfig::~NetConfig() {
  // @@protoc_insertion_point(destructor:RemyBuffers.NetConfig)
  SharedDtor();
}

void NetConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetConfig_descriptor_;
}

const NetConfig& NetConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  return *default_instance_;
}

NetConfig* NetConfig::default_instance_ = NULL;

NetConfig* NetConfig::New(::google::protobuf::Arena* arena) const {
  NetConfig* n = new NetConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RemyBuffers.NetConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(mean_on_duration_, drop_rate_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemyBuffers.NetConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mean_on_duration = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_on_duration_)));
          set_has_mean_on_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_mean_off_duration;
        break;
      }

      // optional double mean_off_duration = 2;
      case 2: {
        if (tag == 17) {
         parse_mean_off_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_off_duration_)));
          set_has_mean_off_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_senders;
        break;
      }

      // optional uint32 num_senders = 3;
      case 3: {
        if (tag == 24) {
         parse_num_senders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_senders_)));
          set_has_num_senders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_link_ppt;
        break;
      }

      // optional double link_ppt = 4;
      case 4: {
        if (tag == 33) {
         parse_link_ppt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &link_ppt_)));
          set_has_link_ppt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_delay;
        break;
      }

      // optional double delay = 5;
      case 5: {
        if (tag == 41) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_link_limit;
        break;
      }

      // optional uint32 link_limit = 6;
      case 6: {
        if (tag == 48) {
         parse_link_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_limit_)));
          set_has_link_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_drop_rate;
        break;
      }

      // optional double drop_rate = 7;
      case 7: {
        if (tag == 57) {
         parse_drop_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drop_rate_)));
          set_has_drop_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemyBuffers.NetConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemyBuffers.NetConfig)
  return false;
#undef DO_
}

void NetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemyBuffers.NetConfig)
  // optional double mean_on_duration = 1;
  if (has_mean_on_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mean_on_duration(), output);
  }

  // optional double mean_off_duration = 2;
  if (has_mean_off_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mean_off_duration(), output);
  }

  // optional uint32 num_senders = 3;
  if (has_num_senders()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_senders(), output);
  }

  // optional double link_ppt = 4;
  if (has_link_ppt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->link_ppt(), output);
  }

  // optional double delay = 5;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->delay(), output);
  }

  // optional uint32 link_limit = 6;
  if (has_link_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->link_limit(), output);
  }

  // optional double drop_rate = 7;
  if (has_drop_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->drop_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemyBuffers.NetConfig)
}

::google::protobuf::uint8* NetConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemyBuffers.NetConfig)
  // optional double mean_on_duration = 1;
  if (has_mean_on_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mean_on_duration(), target);
  }

  // optional double mean_off_duration = 2;
  if (has_mean_off_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mean_off_duration(), target);
  }

  // optional uint32 num_senders = 3;
  if (has_num_senders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_senders(), target);
  }

  // optional double link_ppt = 4;
  if (has_link_ppt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->link_ppt(), target);
  }

  // optional double delay = 5;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->delay(), target);
  }

  // optional uint32 link_limit = 6;
  if (has_link_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->link_limit(), target);
  }

  // optional double drop_rate = 7;
  if (has_drop_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->drop_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemyBuffers.NetConfig)
  return target;
}

int NetConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemyBuffers.NetConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional double mean_on_duration = 1;
    if (has_mean_on_duration()) {
      total_size += 1 + 8;
    }

    // optional double mean_off_duration = 2;
    if (has_mean_off_duration()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_senders = 3;
    if (has_num_senders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_senders());
    }

    // optional double link_ppt = 4;
    if (has_link_ppt()) {
      total_size += 1 + 8;
    }

    // optional double delay = 5;
    if (has_delay()) {
      total_size += 1 + 8;
    }

    // optional uint32 link_limit = 6;
    if (has_link_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_limit());
    }

    // optional double drop_rate = 7;
    if (has_drop_rate()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemyBuffers.NetConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NetConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemyBuffers.NetConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemyBuffers.NetConfig)
    MergeFrom(*source);
  }
}

void NetConfig::MergeFrom(const NetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemyBuffers.NetConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean_on_duration()) {
      set_mean_on_duration(from.mean_on_duration());
    }
    if (from.has_mean_off_duration()) {
      set_mean_off_duration(from.mean_off_duration());
    }
    if (from.has_num_senders()) {
      set_num_senders(from.num_senders());
    }
    if (from.has_link_ppt()) {
      set_link_ppt(from.link_ppt());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_link_limit()) {
      set_link_limit(from.link_limit());
    }
    if (from.has_drop_rate()) {
      set_drop_rate(from.drop_rate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemyBuffers.NetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfig::CopyFrom(const NetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemyBuffers.NetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfig::IsInitialized() const {

  return true;
}

void NetConfig::Swap(NetConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetConfig::InternalSwap(NetConfig* other) {
  std::swap(mean_on_duration_, other->mean_on_duration_);
  std::swap(mean_off_duration_, other->mean_off_duration_);
  std::swap(num_senders_, other->num_senders_);
  std::swap(link_ppt_, other->link_ppt_);
  std::swap(delay_, other->delay_);
  std::swap(link_limit_, other->link_limit_);
  std::swap(drop_rate_, other->drop_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetConfig_descriptor_;
  metadata.reflection = NetConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetConfig

// optional double mean_on_duration = 1;
bool NetConfig::has_mean_on_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetConfig::set_has_mean_on_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void NetConfig::clear_has_mean_on_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetConfig::clear_mean_on_duration() {
  mean_on_duration_ = 0;
  clear_has_mean_on_duration();
}
 double NetConfig::mean_on_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.mean_on_duration)
  return mean_on_duration_;
}
 void NetConfig::set_mean_on_duration(double value) {
  set_has_mean_on_duration();
  mean_on_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.mean_on_duration)
}

// optional double mean_off_duration = 2;
bool NetConfig::has_mean_off_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetConfig::set_has_mean_off_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void NetConfig::clear_has_mean_off_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetConfig::clear_mean_off_duration() {
  mean_off_duration_ = 0;
  clear_has_mean_off_duration();
}
 double NetConfig::mean_off_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.mean_off_duration)
  return mean_off_duration_;
}
 void NetConfig::set_mean_off_duration(double value) {
  set_has_mean_off_duration();
  mean_off_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.mean_off_duration)
}

// optional uint32 num_senders = 3;
bool NetConfig::has_num_senders() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetConfig::set_has_num_senders() {
  _has_bits_[0] |= 0x00000004u;
}
void NetConfig::clear_has_num_senders() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetConfig::clear_num_senders() {
  num_senders_ = 0u;
  clear_has_num_senders();
}
 ::google::protobuf::uint32 NetConfig::num_senders() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.num_senders)
  return num_senders_;
}
 void NetConfig::set_num_senders(::google::protobuf::uint32 value) {
  set_has_num_senders();
  num_senders_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.num_senders)
}

// optional double link_ppt = 4;
bool NetConfig::has_link_ppt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetConfig::set_has_link_ppt() {
  _has_bits_[0] |= 0x00000008u;
}
void NetConfig::clear_has_link_ppt() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetConfig::clear_link_ppt() {
  link_ppt_ = 0;
  clear_has_link_ppt();
}
 double NetConfig::link_ppt() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.link_ppt)
  return link_ppt_;
}
 void NetConfig::set_link_ppt(double value) {
  set_has_link_ppt();
  link_ppt_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.link_ppt)
}

// optional double delay = 5;
bool NetConfig::has_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetConfig::set_has_delay() {
  _has_bits_[0] |= 0x00000010u;
}
void NetConfig::clear_has_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetConfig::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
 double NetConfig::delay() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.delay)
  return delay_;
}
 void NetConfig::set_delay(double value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.delay)
}

// optional uint32 link_limit = 6;
bool NetConfig::has_link_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetConfig::set_has_link_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void NetConfig::clear_has_link_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetConfig::clear_link_limit() {
  link_limit_ = 0u;
  clear_has_link_limit();
}
 ::google::protobuf::uint32 NetConfig::link_limit() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.link_limit)
  return link_limit_;
}
 void NetConfig::set_link_limit(::google::protobuf::uint32 value) {
  set_has_link_limit();
  link_limit_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.link_limit)
}

// optional double drop_rate = 7;
bool NetConfig::has_drop_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetConfig::set_has_drop_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void NetConfig::clear_has_drop_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetConfig::clear_drop_rate() {
  drop_rate_ = 0;
  clear_has_drop_rate();
}
 double NetConfig::drop_rate() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.drop_rate)
  return drop_rate_;
}
 void NetConfig::set_drop_rate(double value) {
  set_has_drop_rate();
  drop_rate_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.drop_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RemyBuffers

// @@protoc_insertion_point(global_scope)
