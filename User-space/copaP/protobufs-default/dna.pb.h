// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufs-default/dna.proto

#ifndef PROTOBUF_protobufs_2ddefault_2fdna_2eproto__INCLUDED
#define PROTOBUF_protobufs_2ddefault_2fdna_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RemyBuffers {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

class ConfigRange;
class Memory;
class MemoryRange;
class NetConfig;
class OptimizationSetting;
class OptimizationSettings;
class Range;
class Whisker;
class WhiskerTree;

// ===================================================================

class WhiskerTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.WhiskerTree) */ {
 public:
  WhiskerTree();
  virtual ~WhiskerTree();

  WhiskerTree(const WhiskerTree& from);

  inline WhiskerTree& operator=(const WhiskerTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiskerTree& default_instance();

  void Swap(WhiskerTree* other);

  // implements Message ----------------------------------------------

  inline WhiskerTree* New() const { return New(NULL); }

  WhiskerTree* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiskerTree& from);
  void MergeFrom(const WhiskerTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WhiskerTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RemyBuffers.MemoryRange domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::RemyBuffers::MemoryRange& domain() const;
  ::RemyBuffers::MemoryRange* mutable_domain();
  ::RemyBuffers::MemoryRange* release_domain();
  void set_allocated_domain(::RemyBuffers::MemoryRange* domain);

  // repeated .RemyBuffers.WhiskerTree children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  const ::RemyBuffers::WhiskerTree& children(int index) const;
  ::RemyBuffers::WhiskerTree* mutable_children(int index);
  ::RemyBuffers::WhiskerTree* add_children();
  ::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree >&
      children() const;

  // optional .RemyBuffers.Whisker leaf = 3;
  bool has_leaf() const;
  void clear_leaf();
  static const int kLeafFieldNumber = 3;
  const ::RemyBuffers::Whisker& leaf() const;
  ::RemyBuffers::Whisker* mutable_leaf();
  ::RemyBuffers::Whisker* release_leaf();
  void set_allocated_leaf(::RemyBuffers::Whisker* leaf);

  // optional .RemyBuffers.ConfigRange config = 4;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 4;
  const ::RemyBuffers::ConfigRange& config() const;
  ::RemyBuffers::ConfigRange* mutable_config();
  ::RemyBuffers::ConfigRange* release_config();
  void set_allocated_config(::RemyBuffers::ConfigRange* config);

  // optional .RemyBuffers.OptimizationSettings optimizer = 5;
  bool has_optimizer() const;
  void clear_optimizer();
  static const int kOptimizerFieldNumber = 5;
  const ::RemyBuffers::OptimizationSettings& optimizer() const;
  ::RemyBuffers::OptimizationSettings* mutable_optimizer();
  ::RemyBuffers::OptimizationSettings* release_optimizer();
  void set_allocated_optimizer(::RemyBuffers::OptimizationSettings* optimizer);

  // @@protoc_insertion_point(class_scope:RemyBuffers.WhiskerTree)
 private:
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_leaf();
  inline void clear_has_leaf();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_optimizer();
  inline void clear_has_optimizer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RemyBuffers::MemoryRange* domain_;
  ::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree > children_;
  ::RemyBuffers::Whisker* leaf_;
  ::RemyBuffers::ConfigRange* config_;
  ::RemyBuffers::OptimizationSettings* optimizer_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static WhiskerTree* default_instance_;
};
// -------------------------------------------------------------------

class MemoryRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.MemoryRange) */ {
 public:
  MemoryRange();
  virtual ~MemoryRange();

  MemoryRange(const MemoryRange& from);

  inline MemoryRange& operator=(const MemoryRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryRange& default_instance();

  void Swap(MemoryRange* other);

  // implements Message ----------------------------------------------

  inline MemoryRange* New() const { return New(NULL); }

  MemoryRange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryRange& from);
  void MergeFrom(const MemoryRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RemyBuffers.Memory lower = 11;
  bool has_lower() const;
  void clear_lower();
  static const int kLowerFieldNumber = 11;
  const ::RemyBuffers::Memory& lower() const;
  ::RemyBuffers::Memory* mutable_lower();
  ::RemyBuffers::Memory* release_lower();
  void set_allocated_lower(::RemyBuffers::Memory* lower);

  // optional .RemyBuffers.Memory upper = 12;
  bool has_upper() const;
  void clear_upper();
  static const int kUpperFieldNumber = 12;
  const ::RemyBuffers::Memory& upper() const;
  ::RemyBuffers::Memory* mutable_upper();
  ::RemyBuffers::Memory* release_upper();
  void set_allocated_upper(::RemyBuffers::Memory* upper);

  // @@protoc_insertion_point(class_scope:RemyBuffers.MemoryRange)
 private:
  inline void set_has_lower();
  inline void clear_has_lower();
  inline void set_has_upper();
  inline void clear_has_upper();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RemyBuffers::Memory* lower_;
  ::RemyBuffers::Memory* upper_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static MemoryRange* default_instance_;
};
// -------------------------------------------------------------------

class Memory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.Memory) */ {
 public:
  Memory();
  virtual ~Memory();

  Memory(const Memory& from);

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Memory& default_instance();

  void Swap(Memory* other);

  // implements Message ----------------------------------------------

  inline Memory* New() const { return New(NULL); }

  Memory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Memory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double rec_send_ewma = 21;
  bool has_rec_send_ewma() const;
  void clear_rec_send_ewma();
  static const int kRecSendEwmaFieldNumber = 21;
  double rec_send_ewma() const;
  void set_rec_send_ewma(double value);

  // optional double rec_rec_ewma = 22;
  bool has_rec_rec_ewma() const;
  void clear_rec_rec_ewma();
  static const int kRecRecEwmaFieldNumber = 22;
  double rec_rec_ewma() const;
  void set_rec_rec_ewma(double value);

  // optional double rtt_ratio = 23;
  bool has_rtt_ratio() const;
  void clear_rtt_ratio();
  static const int kRttRatioFieldNumber = 23;
  double rtt_ratio() const;
  void set_rtt_ratio(double value);

  // optional double slow_rec_rec_ewma = 24;
  bool has_slow_rec_rec_ewma() const;
  void clear_slow_rec_rec_ewma();
  static const int kSlowRecRecEwmaFieldNumber = 24;
  double slow_rec_rec_ewma() const;
  void set_slow_rec_rec_ewma(double value);

  // @@protoc_insertion_point(class_scope:RemyBuffers.Memory)
 private:
  inline void set_has_rec_send_ewma();
  inline void clear_has_rec_send_ewma();
  inline void set_has_rec_rec_ewma();
  inline void clear_has_rec_rec_ewma();
  inline void set_has_rtt_ratio();
  inline void clear_has_rtt_ratio();
  inline void set_has_slow_rec_rec_ewma();
  inline void clear_has_slow_rec_rec_ewma();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double rec_send_ewma_;
  double rec_rec_ewma_;
  double rtt_ratio_;
  double slow_rec_rec_ewma_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static Memory* default_instance_;
};
// -------------------------------------------------------------------

class Whisker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.Whisker) */ {
 public:
  Whisker();
  virtual ~Whisker();

  Whisker(const Whisker& from);

  inline Whisker& operator=(const Whisker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Whisker& default_instance();

  void Swap(Whisker* other);

  // implements Message ----------------------------------------------

  inline Whisker* New() const { return New(NULL); }

  Whisker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Whisker& from);
  void MergeFrom(const Whisker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Whisker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 window_increment = 31;
  bool has_window_increment() const;
  void clear_window_increment();
  static const int kWindowIncrementFieldNumber = 31;
  ::google::protobuf::int32 window_increment() const;
  void set_window_increment(::google::protobuf::int32 value);

  // optional double window_multiple = 32;
  bool has_window_multiple() const;
  void clear_window_multiple();
  static const int kWindowMultipleFieldNumber = 32;
  double window_multiple() const;
  void set_window_multiple(double value);

  // optional double intersend = 33;
  bool has_intersend() const;
  void clear_intersend();
  static const int kIntersendFieldNumber = 33;
  double intersend() const;
  void set_intersend(double value);

  // optional .RemyBuffers.MemoryRange domain = 34;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 34;
  const ::RemyBuffers::MemoryRange& domain() const;
  ::RemyBuffers::MemoryRange* mutable_domain();
  ::RemyBuffers::MemoryRange* release_domain();
  void set_allocated_domain(::RemyBuffers::MemoryRange* domain);

  // @@protoc_insertion_point(class_scope:RemyBuffers.Whisker)
 private:
  inline void set_has_window_increment();
  inline void clear_has_window_increment();
  inline void set_has_window_multiple();
  inline void clear_has_window_multiple();
  inline void set_has_intersend();
  inline void clear_has_intersend();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double window_multiple_;
  double intersend_;
  ::RemyBuffers::MemoryRange* domain_;
  ::google::protobuf::int32 window_increment_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static Whisker* default_instance_;
};
// -------------------------------------------------------------------

class OptimizationSetting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.OptimizationSetting) */ {
 public:
  OptimizationSetting();
  virtual ~OptimizationSetting();

  OptimizationSetting(const OptimizationSetting& from);

  inline OptimizationSetting& operator=(const OptimizationSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizationSetting& default_instance();

  void Swap(OptimizationSetting* other);

  // implements Message ----------------------------------------------

  inline OptimizationSetting* New() const { return New(NULL); }

  OptimizationSetting* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptimizationSetting& from);
  void MergeFrom(const OptimizationSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptimizationSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min_value = 41;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 41;
  double min_value() const;
  void set_min_value(double value);

  // optional double max_value = 42;
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 42;
  double max_value() const;
  void set_max_value(double value);

  // optional double min_change = 43;
  bool has_min_change() const;
  void clear_min_change();
  static const int kMinChangeFieldNumber = 43;
  double min_change() const;
  void set_min_change(double value);

  // optional double max_change = 44;
  bool has_max_change() const;
  void clear_max_change();
  static const int kMaxChangeFieldNumber = 44;
  double max_change() const;
  void set_max_change(double value);

  // optional double multiplier = 45;
  bool has_multiplier() const;
  void clear_multiplier();
  static const int kMultiplierFieldNumber = 45;
  double multiplier() const;
  void set_multiplier(double value);

  // optional double default_value = 46;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 46;
  double default_value() const;
  void set_default_value(double value);

  // @@protoc_insertion_point(class_scope:RemyBuffers.OptimizationSetting)
 private:
  inline void set_has_min_value();
  inline void clear_has_min_value();
  inline void set_has_max_value();
  inline void clear_has_max_value();
  inline void set_has_min_change();
  inline void clear_has_min_change();
  inline void set_has_max_change();
  inline void clear_has_max_change();
  inline void set_has_multiplier();
  inline void clear_has_multiplier();
  inline void set_has_default_value();
  inline void clear_has_default_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double min_value_;
  double max_value_;
  double min_change_;
  double max_change_;
  double multiplier_;
  double default_value_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static OptimizationSetting* default_instance_;
};
// -------------------------------------------------------------------

class OptimizationSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.OptimizationSettings) */ {
 public:
  OptimizationSettings();
  virtual ~OptimizationSettings();

  OptimizationSettings(const OptimizationSettings& from);

  inline OptimizationSettings& operator=(const OptimizationSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizationSettings& default_instance();

  void Swap(OptimizationSettings* other);

  // implements Message ----------------------------------------------

  inline OptimizationSettings* New() const { return New(NULL); }

  OptimizationSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptimizationSettings& from);
  void MergeFrom(const OptimizationSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptimizationSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RemyBuffers.OptimizationSetting window_increment = 51;
  bool has_window_increment() const;
  void clear_window_increment();
  static const int kWindowIncrementFieldNumber = 51;
  const ::RemyBuffers::OptimizationSetting& window_increment() const;
  ::RemyBuffers::OptimizationSetting* mutable_window_increment();
  ::RemyBuffers::OptimizationSetting* release_window_increment();
  void set_allocated_window_increment(::RemyBuffers::OptimizationSetting* window_increment);

  // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
  bool has_window_multiple() const;
  void clear_window_multiple();
  static const int kWindowMultipleFieldNumber = 52;
  const ::RemyBuffers::OptimizationSetting& window_multiple() const;
  ::RemyBuffers::OptimizationSetting* mutable_window_multiple();
  ::RemyBuffers::OptimizationSetting* release_window_multiple();
  void set_allocated_window_multiple(::RemyBuffers::OptimizationSetting* window_multiple);

  // optional .RemyBuffers.OptimizationSetting intersend = 53;
  bool has_intersend() const;
  void clear_intersend();
  static const int kIntersendFieldNumber = 53;
  const ::RemyBuffers::OptimizationSetting& intersend() const;
  ::RemyBuffers::OptimizationSetting* mutable_intersend();
  ::RemyBuffers::OptimizationSetting* release_intersend();
  void set_allocated_intersend(::RemyBuffers::OptimizationSetting* intersend);

  // @@protoc_insertion_point(class_scope:RemyBuffers.OptimizationSettings)
 private:
  inline void set_has_window_increment();
  inline void clear_has_window_increment();
  inline void set_has_window_multiple();
  inline void clear_has_window_multiple();
  inline void set_has_intersend();
  inline void clear_has_intersend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RemyBuffers::OptimizationSetting* window_increment_;
  ::RemyBuffers::OptimizationSetting* window_multiple_;
  ::RemyBuffers::OptimizationSetting* intersend_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static OptimizationSettings* default_instance_;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  void Swap(Range* other);

  // implements Message ----------------------------------------------

  inline Range* New() const { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double low = 61;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 61;
  double low() const;
  void set_low(double value);

  // optional double high = 62;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 62;
  double high() const;
  void set_high(double value);

  // @@protoc_insertion_point(class_scope:RemyBuffers.Range)
 private:
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_high();
  inline void clear_has_high();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double low_;
  double high_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class ConfigRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.ConfigRange) */ {
 public:
  ConfigRange();
  virtual ~ConfigRange();

  ConfigRange(const ConfigRange& from);

  inline ConfigRange& operator=(const ConfigRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRange& default_instance();

  void Swap(ConfigRange* other);

  // implements Message ----------------------------------------------

  inline ConfigRange* New() const { return New(NULL); }

  ConfigRange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigRange& from);
  void MergeFrom(const ConfigRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RemyBuffers.Range link_packets_per_ms = 71;
  bool has_link_packets_per_ms() const;
  void clear_link_packets_per_ms();
  static const int kLinkPacketsPerMsFieldNumber = 71;
  const ::RemyBuffers::Range& link_packets_per_ms() const;
  ::RemyBuffers::Range* mutable_link_packets_per_ms();
  ::RemyBuffers::Range* release_link_packets_per_ms();
  void set_allocated_link_packets_per_ms(::RemyBuffers::Range* link_packets_per_ms);

  // optional .RemyBuffers.Range rtt = 72;
  bool has_rtt() const;
  void clear_rtt();
  static const int kRttFieldNumber = 72;
  const ::RemyBuffers::Range& rtt() const;
  ::RemyBuffers::Range* mutable_rtt();
  ::RemyBuffers::Range* release_rtt();
  void set_allocated_rtt(::RemyBuffers::Range* rtt);

  // optional .RemyBuffers.Range num_senders = 73;
  bool has_num_senders() const;
  void clear_num_senders();
  static const int kNumSendersFieldNumber = 73;
  const ::RemyBuffers::Range& num_senders() const;
  ::RemyBuffers::Range* mutable_num_senders();
  ::RemyBuffers::Range* release_num_senders();
  void set_allocated_num_senders(::RemyBuffers::Range* num_senders);

  // optional .RemyBuffers.Range link_limit = 74;
  bool has_link_limit() const;
  void clear_link_limit();
  static const int kLinkLimitFieldNumber = 74;
  const ::RemyBuffers::Range& link_limit() const;
  ::RemyBuffers::Range* mutable_link_limit();
  ::RemyBuffers::Range* release_link_limit();
  void set_allocated_link_limit(::RemyBuffers::Range* link_limit);

  // optional double mean_off_duration = 81;
  bool has_mean_off_duration() const;
  void clear_mean_off_duration();
  static const int kMeanOffDurationFieldNumber = 81;
  double mean_off_duration() const;
  void set_mean_off_duration(double value);

  // optional double mean_on_duration = 82;
  bool has_mean_on_duration() const;
  void clear_mean_on_duration();
  static const int kMeanOnDurationFieldNumber = 82;
  double mean_on_duration() const;
  void set_mean_on_duration(double value);

  // optional .RemyBuffers.Range drop_rate = 83;
  bool has_drop_rate() const;
  void clear_drop_rate();
  static const int kDropRateFieldNumber = 83;
  const ::RemyBuffers::Range& drop_rate() const;
  ::RemyBuffers::Range* mutable_drop_rate();
  ::RemyBuffers::Range* release_drop_rate();
  void set_allocated_drop_rate(::RemyBuffers::Range* drop_rate);

  // @@protoc_insertion_point(class_scope:RemyBuffers.ConfigRange)
 private:
  inline void set_has_link_packets_per_ms();
  inline void clear_has_link_packets_per_ms();
  inline void set_has_rtt();
  inline void clear_has_rtt();
  inline void set_has_num_senders();
  inline void clear_has_num_senders();
  inline void set_has_link_limit();
  inline void clear_has_link_limit();
  inline void set_has_mean_off_duration();
  inline void clear_has_mean_off_duration();
  inline void set_has_mean_on_duration();
  inline void clear_has_mean_on_duration();
  inline void set_has_drop_rate();
  inline void clear_has_drop_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RemyBuffers::Range* link_packets_per_ms_;
  ::RemyBuffers::Range* rtt_;
  ::RemyBuffers::Range* num_senders_;
  ::RemyBuffers::Range* link_limit_;
  double mean_off_duration_;
  double mean_on_duration_;
  ::RemyBuffers::Range* drop_rate_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static ConfigRange* default_instance_;
};
// -------------------------------------------------------------------

class NetConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemyBuffers.NetConfig) */ {
 public:
  NetConfig();
  virtual ~NetConfig();

  NetConfig(const NetConfig& from);

  inline NetConfig& operator=(const NetConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfig& default_instance();

  void Swap(NetConfig* other);

  // implements Message ----------------------------------------------

  inline NetConfig* New() const { return New(NULL); }

  NetConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfig& from);
  void MergeFrom(const NetConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double mean_on_duration = 1;
  bool has_mean_on_duration() const;
  void clear_mean_on_duration();
  static const int kMeanOnDurationFieldNumber = 1;
  double mean_on_duration() const;
  void set_mean_on_duration(double value);

  // optional double mean_off_duration = 2;
  bool has_mean_off_duration() const;
  void clear_mean_off_duration();
  static const int kMeanOffDurationFieldNumber = 2;
  double mean_off_duration() const;
  void set_mean_off_duration(double value);

  // optional uint32 num_senders = 3;
  bool has_num_senders() const;
  void clear_num_senders();
  static const int kNumSendersFieldNumber = 3;
  ::google::protobuf::uint32 num_senders() const;
  void set_num_senders(::google::protobuf::uint32 value);

  // optional double link_ppt = 4;
  bool has_link_ppt() const;
  void clear_link_ppt();
  static const int kLinkPptFieldNumber = 4;
  double link_ppt() const;
  void set_link_ppt(double value);

  // optional double delay = 5;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 5;
  double delay() const;
  void set_delay(double value);

  // optional uint32 link_limit = 6;
  bool has_link_limit() const;
  void clear_link_limit();
  static const int kLinkLimitFieldNumber = 6;
  ::google::protobuf::uint32 link_limit() const;
  void set_link_limit(::google::protobuf::uint32 value);

  // optional double drop_rate = 7;
  bool has_drop_rate() const;
  void clear_drop_rate();
  static const int kDropRateFieldNumber = 7;
  double drop_rate() const;
  void set_drop_rate(double value);

  // @@protoc_insertion_point(class_scope:RemyBuffers.NetConfig)
 private:
  inline void set_has_mean_on_duration();
  inline void clear_has_mean_on_duration();
  inline void set_has_mean_off_duration();
  inline void clear_has_mean_off_duration();
  inline void set_has_num_senders();
  inline void clear_has_num_senders();
  inline void set_has_link_ppt();
  inline void clear_has_link_ppt();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_link_limit();
  inline void clear_has_link_limit();
  inline void set_has_drop_rate();
  inline void clear_has_drop_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double mean_on_duration_;
  double mean_off_duration_;
  double link_ppt_;
  ::google::protobuf::uint32 num_senders_;
  ::google::protobuf::uint32 link_limit_;
  double delay_;
  double drop_rate_;
  friend void  protobuf_AddDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_AssignDesc_protobufs_2ddefault_2fdna_2eproto();
  friend void protobuf_ShutdownFile_protobufs_2ddefault_2fdna_2eproto();

  void InitAsDefaultInstance();
  static NetConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WhiskerTree

// optional .RemyBuffers.MemoryRange domain = 1;
inline bool WhiskerTree::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiskerTree::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiskerTree::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiskerTree::clear_domain() {
  if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
  clear_has_domain();
}
inline const ::RemyBuffers::MemoryRange& WhiskerTree::domain() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
inline ::RemyBuffers::MemoryRange* WhiskerTree::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    domain_ = new ::RemyBuffers::MemoryRange;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.domain)
  return domain_;
}
inline ::RemyBuffers::MemoryRange* WhiskerTree::release_domain() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.domain)
  clear_has_domain();
  ::RemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}
inline void WhiskerTree::set_allocated_domain(::RemyBuffers::MemoryRange* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.domain)
}

// repeated .RemyBuffers.WhiskerTree children = 2;
inline int WhiskerTree::children_size() const {
  return children_.size();
}
inline void WhiskerTree::clear_children() {
  children_.Clear();
}
inline const ::RemyBuffers::WhiskerTree& WhiskerTree::children(int index) const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.children)
  return children_.Get(index);
}
inline ::RemyBuffers::WhiskerTree* WhiskerTree::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.children)
  return children_.Mutable(index);
}
inline ::RemyBuffers::WhiskerTree* WhiskerTree::add_children() {
  // @@protoc_insertion_point(field_add:RemyBuffers.WhiskerTree.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree >*
WhiskerTree::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:RemyBuffers.WhiskerTree.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RemyBuffers::WhiskerTree >&
WhiskerTree::children() const {
  // @@protoc_insertion_point(field_list:RemyBuffers.WhiskerTree.children)
  return children_;
}

// optional .RemyBuffers.Whisker leaf = 3;
inline bool WhiskerTree::has_leaf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiskerTree::set_has_leaf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiskerTree::clear_has_leaf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiskerTree::clear_leaf() {
  if (leaf_ != NULL) leaf_->::RemyBuffers::Whisker::Clear();
  clear_has_leaf();
}
inline const ::RemyBuffers::Whisker& WhiskerTree::leaf() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.leaf)
  return leaf_ != NULL ? *leaf_ : *default_instance_->leaf_;
}
inline ::RemyBuffers::Whisker* WhiskerTree::mutable_leaf() {
  set_has_leaf();
  if (leaf_ == NULL) {
    leaf_ = new ::RemyBuffers::Whisker;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.leaf)
  return leaf_;
}
inline ::RemyBuffers::Whisker* WhiskerTree::release_leaf() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.leaf)
  clear_has_leaf();
  ::RemyBuffers::Whisker* temp = leaf_;
  leaf_ = NULL;
  return temp;
}
inline void WhiskerTree::set_allocated_leaf(::RemyBuffers::Whisker* leaf) {
  delete leaf_;
  leaf_ = leaf;
  if (leaf) {
    set_has_leaf();
  } else {
    clear_has_leaf();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.leaf)
}

// optional .RemyBuffers.ConfigRange config = 4;
inline bool WhiskerTree::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhiskerTree::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhiskerTree::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhiskerTree::clear_config() {
  if (config_ != NULL) config_->::RemyBuffers::ConfigRange::Clear();
  clear_has_config();
}
inline const ::RemyBuffers::ConfigRange& WhiskerTree::config() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::RemyBuffers::ConfigRange* WhiskerTree::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::RemyBuffers::ConfigRange;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.config)
  return config_;
}
inline ::RemyBuffers::ConfigRange* WhiskerTree::release_config() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.config)
  clear_has_config();
  ::RemyBuffers::ConfigRange* temp = config_;
  config_ = NULL;
  return temp;
}
inline void WhiskerTree::set_allocated_config(::RemyBuffers::ConfigRange* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.config)
}

// optional .RemyBuffers.OptimizationSettings optimizer = 5;
inline bool WhiskerTree::has_optimizer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WhiskerTree::set_has_optimizer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WhiskerTree::clear_has_optimizer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WhiskerTree::clear_optimizer() {
  if (optimizer_ != NULL) optimizer_->::RemyBuffers::OptimizationSettings::Clear();
  clear_has_optimizer();
}
inline const ::RemyBuffers::OptimizationSettings& WhiskerTree::optimizer() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.WhiskerTree.optimizer)
  return optimizer_ != NULL ? *optimizer_ : *default_instance_->optimizer_;
}
inline ::RemyBuffers::OptimizationSettings* WhiskerTree::mutable_optimizer() {
  set_has_optimizer();
  if (optimizer_ == NULL) {
    optimizer_ = new ::RemyBuffers::OptimizationSettings;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.WhiskerTree.optimizer)
  return optimizer_;
}
inline ::RemyBuffers::OptimizationSettings* WhiskerTree::release_optimizer() {
  // @@protoc_insertion_point(field_release:RemyBuffers.WhiskerTree.optimizer)
  clear_has_optimizer();
  ::RemyBuffers::OptimizationSettings* temp = optimizer_;
  optimizer_ = NULL;
  return temp;
}
inline void WhiskerTree::set_allocated_optimizer(::RemyBuffers::OptimizationSettings* optimizer) {
  delete optimizer_;
  optimizer_ = optimizer;
  if (optimizer) {
    set_has_optimizer();
  } else {
    clear_has_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.WhiskerTree.optimizer)
}

// -------------------------------------------------------------------

// MemoryRange

// optional .RemyBuffers.Memory lower = 11;
inline bool MemoryRange::has_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryRange::set_has_lower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryRange::clear_has_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryRange::clear_lower() {
  if (lower_ != NULL) lower_->::RemyBuffers::Memory::Clear();
  clear_has_lower();
}
inline const ::RemyBuffers::Memory& MemoryRange::lower() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.MemoryRange.lower)
  return lower_ != NULL ? *lower_ : *default_instance_->lower_;
}
inline ::RemyBuffers::Memory* MemoryRange::mutable_lower() {
  set_has_lower();
  if (lower_ == NULL) {
    lower_ = new ::RemyBuffers::Memory;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.MemoryRange.lower)
  return lower_;
}
inline ::RemyBuffers::Memory* MemoryRange::release_lower() {
  // @@protoc_insertion_point(field_release:RemyBuffers.MemoryRange.lower)
  clear_has_lower();
  ::RemyBuffers::Memory* temp = lower_;
  lower_ = NULL;
  return temp;
}
inline void MemoryRange::set_allocated_lower(::RemyBuffers::Memory* lower) {
  delete lower_;
  lower_ = lower;
  if (lower) {
    set_has_lower();
  } else {
    clear_has_lower();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.MemoryRange.lower)
}

// optional .RemyBuffers.Memory upper = 12;
inline bool MemoryRange::has_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryRange::set_has_upper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryRange::clear_has_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryRange::clear_upper() {
  if (upper_ != NULL) upper_->::RemyBuffers::Memory::Clear();
  clear_has_upper();
}
inline const ::RemyBuffers::Memory& MemoryRange::upper() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.MemoryRange.upper)
  return upper_ != NULL ? *upper_ : *default_instance_->upper_;
}
inline ::RemyBuffers::Memory* MemoryRange::mutable_upper() {
  set_has_upper();
  if (upper_ == NULL) {
    upper_ = new ::RemyBuffers::Memory;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.MemoryRange.upper)
  return upper_;
}
inline ::RemyBuffers::Memory* MemoryRange::release_upper() {
  // @@protoc_insertion_point(field_release:RemyBuffers.MemoryRange.upper)
  clear_has_upper();
  ::RemyBuffers::Memory* temp = upper_;
  upper_ = NULL;
  return temp;
}
inline void MemoryRange::set_allocated_upper(::RemyBuffers::Memory* upper) {
  delete upper_;
  upper_ = upper;
  if (upper) {
    set_has_upper();
  } else {
    clear_has_upper();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.MemoryRange.upper)
}

// -------------------------------------------------------------------

// Memory

// optional double rec_send_ewma = 21;
inline bool Memory::has_rec_send_ewma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Memory::set_has_rec_send_ewma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Memory::clear_has_rec_send_ewma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Memory::clear_rec_send_ewma() {
  rec_send_ewma_ = 0;
  clear_has_rec_send_ewma();
}
inline double Memory::rec_send_ewma() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.rec_send_ewma)
  return rec_send_ewma_;
}
inline void Memory::set_rec_send_ewma(double value) {
  set_has_rec_send_ewma();
  rec_send_ewma_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.rec_send_ewma)
}

// optional double rec_rec_ewma = 22;
inline bool Memory::has_rec_rec_ewma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Memory::set_has_rec_rec_ewma() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Memory::clear_has_rec_rec_ewma() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Memory::clear_rec_rec_ewma() {
  rec_rec_ewma_ = 0;
  clear_has_rec_rec_ewma();
}
inline double Memory::rec_rec_ewma() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.rec_rec_ewma)
  return rec_rec_ewma_;
}
inline void Memory::set_rec_rec_ewma(double value) {
  set_has_rec_rec_ewma();
  rec_rec_ewma_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.rec_rec_ewma)
}

// optional double rtt_ratio = 23;
inline bool Memory::has_rtt_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Memory::set_has_rtt_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Memory::clear_has_rtt_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Memory::clear_rtt_ratio() {
  rtt_ratio_ = 0;
  clear_has_rtt_ratio();
}
inline double Memory::rtt_ratio() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.rtt_ratio)
  return rtt_ratio_;
}
inline void Memory::set_rtt_ratio(double value) {
  set_has_rtt_ratio();
  rtt_ratio_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.rtt_ratio)
}

// optional double slow_rec_rec_ewma = 24;
inline bool Memory::has_slow_rec_rec_ewma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Memory::set_has_slow_rec_rec_ewma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Memory::clear_has_slow_rec_rec_ewma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Memory::clear_slow_rec_rec_ewma() {
  slow_rec_rec_ewma_ = 0;
  clear_has_slow_rec_rec_ewma();
}
inline double Memory::slow_rec_rec_ewma() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Memory.slow_rec_rec_ewma)
  return slow_rec_rec_ewma_;
}
inline void Memory::set_slow_rec_rec_ewma(double value) {
  set_has_slow_rec_rec_ewma();
  slow_rec_rec_ewma_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Memory.slow_rec_rec_ewma)
}

// -------------------------------------------------------------------

// Whisker

// optional sint32 window_increment = 31;
inline bool Whisker::has_window_increment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Whisker::set_has_window_increment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Whisker::clear_has_window_increment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Whisker::clear_window_increment() {
  window_increment_ = 0;
  clear_has_window_increment();
}
inline ::google::protobuf::int32 Whisker::window_increment() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.window_increment)
  return window_increment_;
}
inline void Whisker::set_window_increment(::google::protobuf::int32 value) {
  set_has_window_increment();
  window_increment_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Whisker.window_increment)
}

// optional double window_multiple = 32;
inline bool Whisker::has_window_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Whisker::set_has_window_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Whisker::clear_has_window_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Whisker::clear_window_multiple() {
  window_multiple_ = 0;
  clear_has_window_multiple();
}
inline double Whisker::window_multiple() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.window_multiple)
  return window_multiple_;
}
inline void Whisker::set_window_multiple(double value) {
  set_has_window_multiple();
  window_multiple_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Whisker.window_multiple)
}

// optional double intersend = 33;
inline bool Whisker::has_intersend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Whisker::set_has_intersend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Whisker::clear_has_intersend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Whisker::clear_intersend() {
  intersend_ = 0;
  clear_has_intersend();
}
inline double Whisker::intersend() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.intersend)
  return intersend_;
}
inline void Whisker::set_intersend(double value) {
  set_has_intersend();
  intersend_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Whisker.intersend)
}

// optional .RemyBuffers.MemoryRange domain = 34;
inline bool Whisker::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Whisker::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Whisker::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Whisker::clear_domain() {
  if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
  clear_has_domain();
}
inline const ::RemyBuffers::MemoryRange& Whisker::domain() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Whisker.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
inline ::RemyBuffers::MemoryRange* Whisker::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    domain_ = new ::RemyBuffers::MemoryRange;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.Whisker.domain)
  return domain_;
}
inline ::RemyBuffers::MemoryRange* Whisker::release_domain() {
  // @@protoc_insertion_point(field_release:RemyBuffers.Whisker.domain)
  clear_has_domain();
  ::RemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}
inline void Whisker::set_allocated_domain(::RemyBuffers::MemoryRange* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.Whisker.domain)
}

// -------------------------------------------------------------------

// OptimizationSetting

// optional double min_value = 41;
inline bool OptimizationSetting::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptimizationSetting::set_has_min_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptimizationSetting::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptimizationSetting::clear_min_value() {
  min_value_ = 0;
  clear_has_min_value();
}
inline double OptimizationSetting::min_value() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.min_value)
  return min_value_;
}
inline void OptimizationSetting::set_min_value(double value) {
  set_has_min_value();
  min_value_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.min_value)
}

// optional double max_value = 42;
inline bool OptimizationSetting::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptimizationSetting::set_has_max_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptimizationSetting::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptimizationSetting::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
inline double OptimizationSetting::max_value() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.max_value)
  return max_value_;
}
inline void OptimizationSetting::set_max_value(double value) {
  set_has_max_value();
  max_value_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.max_value)
}

// optional double min_change = 43;
inline bool OptimizationSetting::has_min_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptimizationSetting::set_has_min_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptimizationSetting::clear_has_min_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptimizationSetting::clear_min_change() {
  min_change_ = 0;
  clear_has_min_change();
}
inline double OptimizationSetting::min_change() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.min_change)
  return min_change_;
}
inline void OptimizationSetting::set_min_change(double value) {
  set_has_min_change();
  min_change_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.min_change)
}

// optional double max_change = 44;
inline bool OptimizationSetting::has_max_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptimizationSetting::set_has_max_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptimizationSetting::clear_has_max_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptimizationSetting::clear_max_change() {
  max_change_ = 0;
  clear_has_max_change();
}
inline double OptimizationSetting::max_change() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.max_change)
  return max_change_;
}
inline void OptimizationSetting::set_max_change(double value) {
  set_has_max_change();
  max_change_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.max_change)
}

// optional double multiplier = 45;
inline bool OptimizationSetting::has_multiplier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptimizationSetting::set_has_multiplier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptimizationSetting::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptimizationSetting::clear_multiplier() {
  multiplier_ = 0;
  clear_has_multiplier();
}
inline double OptimizationSetting::multiplier() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.multiplier)
  return multiplier_;
}
inline void OptimizationSetting::set_multiplier(double value) {
  set_has_multiplier();
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.multiplier)
}

// optional double default_value = 46;
inline bool OptimizationSetting::has_default_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptimizationSetting::set_has_default_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptimizationSetting::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptimizationSetting::clear_default_value() {
  default_value_ = 0;
  clear_has_default_value();
}
inline double OptimizationSetting::default_value() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSetting.default_value)
  return default_value_;
}
inline void OptimizationSetting::set_default_value(double value) {
  set_has_default_value();
  default_value_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.OptimizationSetting.default_value)
}

// -------------------------------------------------------------------

// OptimizationSettings

// optional .RemyBuffers.OptimizationSetting window_increment = 51;
inline bool OptimizationSettings::has_window_increment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptimizationSettings::set_has_window_increment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptimizationSettings::clear_has_window_increment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptimizationSettings::clear_window_increment() {
  if (window_increment_ != NULL) window_increment_->::RemyBuffers::OptimizationSetting::Clear();
  clear_has_window_increment();
}
inline const ::RemyBuffers::OptimizationSetting& OptimizationSettings::window_increment() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSettings.window_increment)
  return window_increment_ != NULL ? *window_increment_ : *default_instance_->window_increment_;
}
inline ::RemyBuffers::OptimizationSetting* OptimizationSettings::mutable_window_increment() {
  set_has_window_increment();
  if (window_increment_ == NULL) {
    window_increment_ = new ::RemyBuffers::OptimizationSetting;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.OptimizationSettings.window_increment)
  return window_increment_;
}
inline ::RemyBuffers::OptimizationSetting* OptimizationSettings::release_window_increment() {
  // @@protoc_insertion_point(field_release:RemyBuffers.OptimizationSettings.window_increment)
  clear_has_window_increment();
  ::RemyBuffers::OptimizationSetting* temp = window_increment_;
  window_increment_ = NULL;
  return temp;
}
inline void OptimizationSettings::set_allocated_window_increment(::RemyBuffers::OptimizationSetting* window_increment) {
  delete window_increment_;
  window_increment_ = window_increment;
  if (window_increment) {
    set_has_window_increment();
  } else {
    clear_has_window_increment();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.OptimizationSettings.window_increment)
}

// optional .RemyBuffers.OptimizationSetting window_multiple = 52;
inline bool OptimizationSettings::has_window_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptimizationSettings::set_has_window_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptimizationSettings::clear_has_window_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptimizationSettings::clear_window_multiple() {
  if (window_multiple_ != NULL) window_multiple_->::RemyBuffers::OptimizationSetting::Clear();
  clear_has_window_multiple();
}
inline const ::RemyBuffers::OptimizationSetting& OptimizationSettings::window_multiple() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSettings.window_multiple)
  return window_multiple_ != NULL ? *window_multiple_ : *default_instance_->window_multiple_;
}
inline ::RemyBuffers::OptimizationSetting* OptimizationSettings::mutable_window_multiple() {
  set_has_window_multiple();
  if (window_multiple_ == NULL) {
    window_multiple_ = new ::RemyBuffers::OptimizationSetting;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.OptimizationSettings.window_multiple)
  return window_multiple_;
}
inline ::RemyBuffers::OptimizationSetting* OptimizationSettings::release_window_multiple() {
  // @@protoc_insertion_point(field_release:RemyBuffers.OptimizationSettings.window_multiple)
  clear_has_window_multiple();
  ::RemyBuffers::OptimizationSetting* temp = window_multiple_;
  window_multiple_ = NULL;
  return temp;
}
inline void OptimizationSettings::set_allocated_window_multiple(::RemyBuffers::OptimizationSetting* window_multiple) {
  delete window_multiple_;
  window_multiple_ = window_multiple;
  if (window_multiple) {
    set_has_window_multiple();
  } else {
    clear_has_window_multiple();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.OptimizationSettings.window_multiple)
}

// optional .RemyBuffers.OptimizationSetting intersend = 53;
inline bool OptimizationSettings::has_intersend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptimizationSettings::set_has_intersend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptimizationSettings::clear_has_intersend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptimizationSettings::clear_intersend() {
  if (intersend_ != NULL) intersend_->::RemyBuffers::OptimizationSetting::Clear();
  clear_has_intersend();
}
inline const ::RemyBuffers::OptimizationSetting& OptimizationSettings::intersend() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.OptimizationSettings.intersend)
  return intersend_ != NULL ? *intersend_ : *default_instance_->intersend_;
}
inline ::RemyBuffers::OptimizationSetting* OptimizationSettings::mutable_intersend() {
  set_has_intersend();
  if (intersend_ == NULL) {
    intersend_ = new ::RemyBuffers::OptimizationSetting;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.OptimizationSettings.intersend)
  return intersend_;
}
inline ::RemyBuffers::OptimizationSetting* OptimizationSettings::release_intersend() {
  // @@protoc_insertion_point(field_release:RemyBuffers.OptimizationSettings.intersend)
  clear_has_intersend();
  ::RemyBuffers::OptimizationSetting* temp = intersend_;
  intersend_ = NULL;
  return temp;
}
inline void OptimizationSettings::set_allocated_intersend(::RemyBuffers::OptimizationSetting* intersend) {
  delete intersend_;
  intersend_ = intersend;
  if (intersend) {
    set_has_intersend();
  } else {
    clear_has_intersend();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.OptimizationSettings.intersend)
}

// -------------------------------------------------------------------

// Range

// optional double low = 61;
inline bool Range::has_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_low() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_low() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double Range::low() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Range.low)
  return low_;
}
inline void Range::set_low(double value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Range.low)
}

// optional double high = 62;
inline bool Range::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double Range::high() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.Range.high)
  return high_;
}
inline void Range::set_high(double value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.Range.high)
}

// -------------------------------------------------------------------

// ConfigRange

// optional .RemyBuffers.Range link_packets_per_ms = 71;
inline bool ConfigRange::has_link_packets_per_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRange::set_has_link_packets_per_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRange::clear_has_link_packets_per_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRange::clear_link_packets_per_ms() {
  if (link_packets_per_ms_ != NULL) link_packets_per_ms_->::RemyBuffers::Range::Clear();
  clear_has_link_packets_per_ms();
}
inline const ::RemyBuffers::Range& ConfigRange::link_packets_per_ms() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.link_packets_per_ms)
  return link_packets_per_ms_ != NULL ? *link_packets_per_ms_ : *default_instance_->link_packets_per_ms_;
}
inline ::RemyBuffers::Range* ConfigRange::mutable_link_packets_per_ms() {
  set_has_link_packets_per_ms();
  if (link_packets_per_ms_ == NULL) {
    link_packets_per_ms_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.link_packets_per_ms)
  return link_packets_per_ms_;
}
inline ::RemyBuffers::Range* ConfigRange::release_link_packets_per_ms() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.link_packets_per_ms)
  clear_has_link_packets_per_ms();
  ::RemyBuffers::Range* temp = link_packets_per_ms_;
  link_packets_per_ms_ = NULL;
  return temp;
}
inline void ConfigRange::set_allocated_link_packets_per_ms(::RemyBuffers::Range* link_packets_per_ms) {
  delete link_packets_per_ms_;
  link_packets_per_ms_ = link_packets_per_ms;
  if (link_packets_per_ms) {
    set_has_link_packets_per_ms();
  } else {
    clear_has_link_packets_per_ms();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.link_packets_per_ms)
}

// optional .RemyBuffers.Range rtt = 72;
inline bool ConfigRange::has_rtt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRange::set_has_rtt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRange::clear_has_rtt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRange::clear_rtt() {
  if (rtt_ != NULL) rtt_->::RemyBuffers::Range::Clear();
  clear_has_rtt();
}
inline const ::RemyBuffers::Range& ConfigRange::rtt() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.rtt)
  return rtt_ != NULL ? *rtt_ : *default_instance_->rtt_;
}
inline ::RemyBuffers::Range* ConfigRange::mutable_rtt() {
  set_has_rtt();
  if (rtt_ == NULL) {
    rtt_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.rtt)
  return rtt_;
}
inline ::RemyBuffers::Range* ConfigRange::release_rtt() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.rtt)
  clear_has_rtt();
  ::RemyBuffers::Range* temp = rtt_;
  rtt_ = NULL;
  return temp;
}
inline void ConfigRange::set_allocated_rtt(::RemyBuffers::Range* rtt) {
  delete rtt_;
  rtt_ = rtt;
  if (rtt) {
    set_has_rtt();
  } else {
    clear_has_rtt();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.rtt)
}

// optional .RemyBuffers.Range num_senders = 73;
inline bool ConfigRange::has_num_senders() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRange::set_has_num_senders() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRange::clear_has_num_senders() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRange::clear_num_senders() {
  if (num_senders_ != NULL) num_senders_->::RemyBuffers::Range::Clear();
  clear_has_num_senders();
}
inline const ::RemyBuffers::Range& ConfigRange::num_senders() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.num_senders)
  return num_senders_ != NULL ? *num_senders_ : *default_instance_->num_senders_;
}
inline ::RemyBuffers::Range* ConfigRange::mutable_num_senders() {
  set_has_num_senders();
  if (num_senders_ == NULL) {
    num_senders_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.num_senders)
  return num_senders_;
}
inline ::RemyBuffers::Range* ConfigRange::release_num_senders() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.num_senders)
  clear_has_num_senders();
  ::RemyBuffers::Range* temp = num_senders_;
  num_senders_ = NULL;
  return temp;
}
inline void ConfigRange::set_allocated_num_senders(::RemyBuffers::Range* num_senders) {
  delete num_senders_;
  num_senders_ = num_senders;
  if (num_senders) {
    set_has_num_senders();
  } else {
    clear_has_num_senders();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.num_senders)
}

// optional .RemyBuffers.Range link_limit = 74;
inline bool ConfigRange::has_link_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigRange::set_has_link_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigRange::clear_has_link_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigRange::clear_link_limit() {
  if (link_limit_ != NULL) link_limit_->::RemyBuffers::Range::Clear();
  clear_has_link_limit();
}
inline const ::RemyBuffers::Range& ConfigRange::link_limit() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.link_limit)
  return link_limit_ != NULL ? *link_limit_ : *default_instance_->link_limit_;
}
inline ::RemyBuffers::Range* ConfigRange::mutable_link_limit() {
  set_has_link_limit();
  if (link_limit_ == NULL) {
    link_limit_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.link_limit)
  return link_limit_;
}
inline ::RemyBuffers::Range* ConfigRange::release_link_limit() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.link_limit)
  clear_has_link_limit();
  ::RemyBuffers::Range* temp = link_limit_;
  link_limit_ = NULL;
  return temp;
}
inline void ConfigRange::set_allocated_link_limit(::RemyBuffers::Range* link_limit) {
  delete link_limit_;
  link_limit_ = link_limit;
  if (link_limit) {
    set_has_link_limit();
  } else {
    clear_has_link_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.link_limit)
}

// optional double mean_off_duration = 81;
inline bool ConfigRange::has_mean_off_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigRange::set_has_mean_off_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigRange::clear_has_mean_off_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigRange::clear_mean_off_duration() {
  mean_off_duration_ = 0;
  clear_has_mean_off_duration();
}
inline double ConfigRange::mean_off_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.mean_off_duration)
  return mean_off_duration_;
}
inline void ConfigRange::set_mean_off_duration(double value) {
  set_has_mean_off_duration();
  mean_off_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.ConfigRange.mean_off_duration)
}

// optional double mean_on_duration = 82;
inline bool ConfigRange::has_mean_on_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigRange::set_has_mean_on_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigRange::clear_has_mean_on_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigRange::clear_mean_on_duration() {
  mean_on_duration_ = 0;
  clear_has_mean_on_duration();
}
inline double ConfigRange::mean_on_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.mean_on_duration)
  return mean_on_duration_;
}
inline void ConfigRange::set_mean_on_duration(double value) {
  set_has_mean_on_duration();
  mean_on_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.ConfigRange.mean_on_duration)
}

// optional .RemyBuffers.Range drop_rate = 83;
inline bool ConfigRange::has_drop_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigRange::set_has_drop_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigRange::clear_has_drop_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigRange::clear_drop_rate() {
  if (drop_rate_ != NULL) drop_rate_->::RemyBuffers::Range::Clear();
  clear_has_drop_rate();
}
inline const ::RemyBuffers::Range& ConfigRange::drop_rate() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.ConfigRange.drop_rate)
  return drop_rate_ != NULL ? *drop_rate_ : *default_instance_->drop_rate_;
}
inline ::RemyBuffers::Range* ConfigRange::mutable_drop_rate() {
  set_has_drop_rate();
  if (drop_rate_ == NULL) {
    drop_rate_ = new ::RemyBuffers::Range;
  }
  // @@protoc_insertion_point(field_mutable:RemyBuffers.ConfigRange.drop_rate)
  return drop_rate_;
}
inline ::RemyBuffers::Range* ConfigRange::release_drop_rate() {
  // @@protoc_insertion_point(field_release:RemyBuffers.ConfigRange.drop_rate)
  clear_has_drop_rate();
  ::RemyBuffers::Range* temp = drop_rate_;
  drop_rate_ = NULL;
  return temp;
}
inline void ConfigRange::set_allocated_drop_rate(::RemyBuffers::Range* drop_rate) {
  delete drop_rate_;
  drop_rate_ = drop_rate;
  if (drop_rate) {
    set_has_drop_rate();
  } else {
    clear_has_drop_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:RemyBuffers.ConfigRange.drop_rate)
}

// -------------------------------------------------------------------

// NetConfig

// optional double mean_on_duration = 1;
inline bool NetConfig::has_mean_on_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfig::set_has_mean_on_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfig::clear_has_mean_on_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfig::clear_mean_on_duration() {
  mean_on_duration_ = 0;
  clear_has_mean_on_duration();
}
inline double NetConfig::mean_on_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.mean_on_duration)
  return mean_on_duration_;
}
inline void NetConfig::set_mean_on_duration(double value) {
  set_has_mean_on_duration();
  mean_on_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.mean_on_duration)
}

// optional double mean_off_duration = 2;
inline bool NetConfig::has_mean_off_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetConfig::set_has_mean_off_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetConfig::clear_has_mean_off_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetConfig::clear_mean_off_duration() {
  mean_off_duration_ = 0;
  clear_has_mean_off_duration();
}
inline double NetConfig::mean_off_duration() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.mean_off_duration)
  return mean_off_duration_;
}
inline void NetConfig::set_mean_off_duration(double value) {
  set_has_mean_off_duration();
  mean_off_duration_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.mean_off_duration)
}

// optional uint32 num_senders = 3;
inline bool NetConfig::has_num_senders() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetConfig::set_has_num_senders() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetConfig::clear_has_num_senders() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetConfig::clear_num_senders() {
  num_senders_ = 0u;
  clear_has_num_senders();
}
inline ::google::protobuf::uint32 NetConfig::num_senders() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.num_senders)
  return num_senders_;
}
inline void NetConfig::set_num_senders(::google::protobuf::uint32 value) {
  set_has_num_senders();
  num_senders_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.num_senders)
}

// optional double link_ppt = 4;
inline bool NetConfig::has_link_ppt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetConfig::set_has_link_ppt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetConfig::clear_has_link_ppt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetConfig::clear_link_ppt() {
  link_ppt_ = 0;
  clear_has_link_ppt();
}
inline double NetConfig::link_ppt() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.link_ppt)
  return link_ppt_;
}
inline void NetConfig::set_link_ppt(double value) {
  set_has_link_ppt();
  link_ppt_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.link_ppt)
}

// optional double delay = 5;
inline bool NetConfig::has_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetConfig::set_has_delay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetConfig::clear_has_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetConfig::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline double NetConfig::delay() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.delay)
  return delay_;
}
inline void NetConfig::set_delay(double value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.delay)
}

// optional uint32 link_limit = 6;
inline bool NetConfig::has_link_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetConfig::set_has_link_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetConfig::clear_has_link_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetConfig::clear_link_limit() {
  link_limit_ = 0u;
  clear_has_link_limit();
}
inline ::google::protobuf::uint32 NetConfig::link_limit() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.link_limit)
  return link_limit_;
}
inline void NetConfig::set_link_limit(::google::protobuf::uint32 value) {
  set_has_link_limit();
  link_limit_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.link_limit)
}

// optional double drop_rate = 7;
inline bool NetConfig::has_drop_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetConfig::set_has_drop_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetConfig::clear_has_drop_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetConfig::clear_drop_rate() {
  drop_rate_ = 0;
  clear_has_drop_rate();
}
inline double NetConfig::drop_rate() const {
  // @@protoc_insertion_point(field_get:RemyBuffers.NetConfig.drop_rate)
  return drop_rate_;
}
inline void NetConfig::set_drop_rate(double value) {
  set_has_drop_rate();
  drop_rate_ = value;
  // @@protoc_insertion_point(field_set:RemyBuffers.NetConfig.drop_rate)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemyBuffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobufs_2ddefault_2fdna_2eproto__INCLUDED
